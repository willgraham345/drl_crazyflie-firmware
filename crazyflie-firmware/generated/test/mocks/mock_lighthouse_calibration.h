/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIGHTHOUSE_CALIBRATION_H
#define _MOCK_LIGHTHOUSE_CALIBRATION_H

#include "lighthouse_calibration.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_lighthouse_calibration_Init(void);
void mock_lighthouse_calibration_Destroy(void);
void mock_lighthouse_calibration_Verify(void);




#define lighthouseCalibrationInitFromFrame_Ignore() lighthouseCalibrationInitFromFrame_CMockIgnore()
void lighthouseCalibrationInitFromFrame_CMockIgnore(void);
#define lighthouseCalibrationInitFromFrame_Expect(calib, frame) lighthouseCalibrationInitFromFrame_CMockExpect(__LINE__, calib, frame)
void lighthouseCalibrationInitFromFrame_CMockExpect(UNITY_LINE_TYPE cmock_line, lighthouseCalibration_t* calib, struct ootxDataFrame_s* frame);
typedef void (* CMOCK_lighthouseCalibrationInitFromFrame_CALLBACK)(lighthouseCalibration_t* calib, struct ootxDataFrame_s* frame, int cmock_num_calls);
void lighthouseCalibrationInitFromFrame_StubWithCallback(CMOCK_lighthouseCalibrationInitFromFrame_CALLBACK Callback);
#define lighthouseCalibrationInitFromFrame_ExpectWithArray(calib, calib_Depth, frame, frame_Depth) lighthouseCalibrationInitFromFrame_CMockExpectWithArray(__LINE__, calib, calib_Depth, frame, frame_Depth)
void lighthouseCalibrationInitFromFrame_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, lighthouseCalibration_t* calib, int calib_Depth, struct ootxDataFrame_s* frame, int frame_Depth);
#define lighthouseCalibrationInitFromFrame_IgnoreArg_calib() lighthouseCalibrationInitFromFrame_CMockIgnoreArg_calib(__LINE__)
void lighthouseCalibrationInitFromFrame_CMockIgnoreArg_calib(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationInitFromFrame_IgnoreArg_frame() lighthouseCalibrationInitFromFrame_CMockIgnoreArg_frame(__LINE__)
void lighthouseCalibrationInitFromFrame_CMockIgnoreArg_frame(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV1_Ignore() lighthouseCalibrationApplyV1_CMockIgnore()
void lighthouseCalibrationApplyV1_CMockIgnore(void);
#define lighthouseCalibrationApplyV1_Expect(calib, rawAngles, correctedAngles) lighthouseCalibrationApplyV1_CMockExpect(__LINE__, calib, rawAngles, correctedAngles)
void lighthouseCalibrationApplyV1_CMockExpect(UNITY_LINE_TYPE cmock_line, const lighthouseCalibration_t* calib, const float* rawAngles, float* correctedAngles);
typedef void (* CMOCK_lighthouseCalibrationApplyV1_CALLBACK)(const lighthouseCalibration_t* calib, const float* rawAngles, float* correctedAngles, int cmock_num_calls);
void lighthouseCalibrationApplyV1_StubWithCallback(CMOCK_lighthouseCalibrationApplyV1_CALLBACK Callback);
#define lighthouseCalibrationApplyV1_ExpectWithArray(calib, calib_Depth, rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth) lighthouseCalibrationApplyV1_CMockExpectWithArray(__LINE__, calib, calib_Depth, rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth)
void lighthouseCalibrationApplyV1_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const lighthouseCalibration_t* calib, int calib_Depth, const float* rawAngles, int rawAngles_Depth, float* correctedAngles, int correctedAngles_Depth);
#define lighthouseCalibrationApplyV1_IgnoreArg_calib() lighthouseCalibrationApplyV1_CMockIgnoreArg_calib(__LINE__)
void lighthouseCalibrationApplyV1_CMockIgnoreArg_calib(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV1_IgnoreArg_rawAngles() lighthouseCalibrationApplyV1_CMockIgnoreArg_rawAngles(__LINE__)
void lighthouseCalibrationApplyV1_CMockIgnoreArg_rawAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV1_IgnoreArg_correctedAngles() lighthouseCalibrationApplyV1_CMockIgnoreArg_correctedAngles(__LINE__)
void lighthouseCalibrationApplyV1_CMockIgnoreArg_correctedAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV2_Ignore() lighthouseCalibrationApplyV2_CMockIgnore()
void lighthouseCalibrationApplyV2_CMockIgnore(void);
#define lighthouseCalibrationApplyV2_Expect(calib, rawAngles, correctedAngles) lighthouseCalibrationApplyV2_CMockExpect(__LINE__, calib, rawAngles, correctedAngles)
void lighthouseCalibrationApplyV2_CMockExpect(UNITY_LINE_TYPE cmock_line, const lighthouseCalibration_t* calib, const float* rawAngles, float* correctedAngles);
typedef void (* CMOCK_lighthouseCalibrationApplyV2_CALLBACK)(const lighthouseCalibration_t* calib, const float* rawAngles, float* correctedAngles, int cmock_num_calls);
void lighthouseCalibrationApplyV2_StubWithCallback(CMOCK_lighthouseCalibrationApplyV2_CALLBACK Callback);
#define lighthouseCalibrationApplyV2_ExpectWithArray(calib, calib_Depth, rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth) lighthouseCalibrationApplyV2_CMockExpectWithArray(__LINE__, calib, calib_Depth, rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth)
void lighthouseCalibrationApplyV2_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const lighthouseCalibration_t* calib, int calib_Depth, const float* rawAngles, int rawAngles_Depth, float* correctedAngles, int correctedAngles_Depth);
#define lighthouseCalibrationApplyV2_IgnoreArg_calib() lighthouseCalibrationApplyV2_CMockIgnoreArg_calib(__LINE__)
void lighthouseCalibrationApplyV2_CMockIgnoreArg_calib(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV2_IgnoreArg_rawAngles() lighthouseCalibrationApplyV2_CMockIgnoreArg_rawAngles(__LINE__)
void lighthouseCalibrationApplyV2_CMockIgnoreArg_rawAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyV2_IgnoreArg_correctedAngles() lighthouseCalibrationApplyV2_CMockIgnoreArg_correctedAngles(__LINE__)
void lighthouseCalibrationApplyV2_CMockIgnoreArg_correctedAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyNothing_Ignore() lighthouseCalibrationApplyNothing_CMockIgnore()
void lighthouseCalibrationApplyNothing_CMockIgnore(void);
#define lighthouseCalibrationApplyNothing_Expect(rawAngles, correctedAngles) lighthouseCalibrationApplyNothing_CMockExpect(__LINE__, rawAngles, correctedAngles)
void lighthouseCalibrationApplyNothing_CMockExpect(UNITY_LINE_TYPE cmock_line, const float* rawAngles, float* correctedAngles);
typedef void (* CMOCK_lighthouseCalibrationApplyNothing_CALLBACK)(const float* rawAngles, float* correctedAngles, int cmock_num_calls);
void lighthouseCalibrationApplyNothing_StubWithCallback(CMOCK_lighthouseCalibrationApplyNothing_CALLBACK Callback);
#define lighthouseCalibrationApplyNothing_ExpectWithArray(rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth) lighthouseCalibrationApplyNothing_CMockExpectWithArray(__LINE__, rawAngles, rawAngles_Depth, correctedAngles, correctedAngles_Depth)
void lighthouseCalibrationApplyNothing_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const float* rawAngles, int rawAngles_Depth, float* correctedAngles, int correctedAngles_Depth);
#define lighthouseCalibrationApplyNothing_IgnoreArg_rawAngles() lighthouseCalibrationApplyNothing_CMockIgnoreArg_rawAngles(__LINE__)
void lighthouseCalibrationApplyNothing_CMockIgnoreArg_rawAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationApplyNothing_IgnoreArg_correctedAngles() lighthouseCalibrationApplyNothing_CMockIgnoreArg_correctedAngles(__LINE__)
void lighthouseCalibrationApplyNothing_CMockIgnoreArg_correctedAngles(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreAndReturn(cmock_retval) lighthouseCalibrationMeasurementModelLh1_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define lighthouseCalibrationMeasurementModelLh1_ExpectAndReturn(x, y, z, t, calib, cmock_retval) lighthouseCalibrationMeasurementModelLh1_CMockExpectAndReturn(__LINE__, x, y, z, t, calib, cmock_retval)
void lighthouseCalibrationMeasurementModelLh1_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, float cmock_to_return);
typedef float (* CMOCK_lighthouseCalibrationMeasurementModelLh1_CALLBACK)(const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, int cmock_num_calls);
void lighthouseCalibrationMeasurementModelLh1_StubWithCallback(CMOCK_lighthouseCalibrationMeasurementModelLh1_CALLBACK Callback);
#define lighthouseCalibrationMeasurementModelLh1_ExpectWithArrayAndReturn(x, y, z, t, calib, calib_Depth, cmock_retval) lighthouseCalibrationMeasurementModelLh1_CMockExpectWithArrayAndReturn(__LINE__, x, y, z, t, calib, calib_Depth, cmock_retval)
void lighthouseCalibrationMeasurementModelLh1_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, int calib_Depth, float cmock_to_return);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreArg_x() lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_x(__LINE__)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_x(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreArg_y() lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_y(__LINE__)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_y(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreArg_z() lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_z(__LINE__)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_z(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreArg_t() lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_t(__LINE__)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_t(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh1_IgnoreArg_calib() lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_calib(__LINE__)
void lighthouseCalibrationMeasurementModelLh1_CMockIgnoreArg_calib(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreAndReturn(cmock_retval) lighthouseCalibrationMeasurementModelLh2_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define lighthouseCalibrationMeasurementModelLh2_ExpectAndReturn(x, y, z, t, calib, cmock_retval) lighthouseCalibrationMeasurementModelLh2_CMockExpectAndReturn(__LINE__, x, y, z, t, calib, cmock_retval)
void lighthouseCalibrationMeasurementModelLh2_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, float cmock_to_return);
typedef float (* CMOCK_lighthouseCalibrationMeasurementModelLh2_CALLBACK)(const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, int cmock_num_calls);
void lighthouseCalibrationMeasurementModelLh2_StubWithCallback(CMOCK_lighthouseCalibrationMeasurementModelLh2_CALLBACK Callback);
#define lighthouseCalibrationMeasurementModelLh2_ExpectWithArrayAndReturn(x, y, z, t, calib, calib_Depth, cmock_retval) lighthouseCalibrationMeasurementModelLh2_CMockExpectWithArrayAndReturn(__LINE__, x, y, z, t, calib, calib_Depth, cmock_retval)
void lighthouseCalibrationMeasurementModelLh2_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const float x, const float y, const float z, const float t, const lighthouseCalibrationSweep_t* calib, int calib_Depth, float cmock_to_return);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreArg_x() lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_x(__LINE__)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_x(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreArg_y() lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_y(__LINE__)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_y(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreArg_z() lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_z(__LINE__)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_z(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreArg_t() lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_t(__LINE__)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_t(UNITY_LINE_TYPE cmock_line);
#define lighthouseCalibrationMeasurementModelLh2_IgnoreArg_calib() lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_calib(__LINE__)
void lighthouseCalibrationMeasurementModelLh2_CMockIgnoreArg_calib(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
