/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CONFIGBLOCK_H
#define _MOCK_CONFIGBLOCK_H

#include "configblock.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_configblock_Init(void);
void mock_configblock_Destroy(void);
void mock_configblock_Verify(void);




#define configblockInit_IgnoreAndReturn(cmock_retval) configblockInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define configblockInit_ExpectAndReturn(cmock_retval) configblockInit_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_configblockInit_CALLBACK)(int cmock_num_calls);
void configblockInit_StubWithCallback(CMOCK_configblockInit_CALLBACK Callback);
#define configblockTest_IgnoreAndReturn(cmock_retval) configblockTest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockTest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define configblockTest_ExpectAndReturn(cmock_retval) configblockTest_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockTest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_configblockTest_CALLBACK)(int cmock_num_calls);
void configblockTest_StubWithCallback(CMOCK_configblockTest_CALLBACK Callback);
#define configblockGetRadioChannel_IgnoreAndReturn(cmock_retval) configblockGetRadioChannel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockGetRadioChannel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define configblockGetRadioChannel_ExpectAndReturn(cmock_retval) configblockGetRadioChannel_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockGetRadioChannel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_configblockGetRadioChannel_CALLBACK)(int cmock_num_calls);
void configblockGetRadioChannel_StubWithCallback(CMOCK_configblockGetRadioChannel_CALLBACK Callback);
#define configblockGetRadioSpeed_IgnoreAndReturn(cmock_retval) configblockGetRadioSpeed_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockGetRadioSpeed_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define configblockGetRadioSpeed_ExpectAndReturn(cmock_retval) configblockGetRadioSpeed_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockGetRadioSpeed_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_configblockGetRadioSpeed_CALLBACK)(int cmock_num_calls);
void configblockGetRadioSpeed_StubWithCallback(CMOCK_configblockGetRadioSpeed_CALLBACK Callback);
#define configblockGetRadioAddress_IgnoreAndReturn(cmock_retval) configblockGetRadioAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockGetRadioAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
#define configblockGetRadioAddress_ExpectAndReturn(cmock_retval) configblockGetRadioAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockGetRadioAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
typedef uint64_t (* CMOCK_configblockGetRadioAddress_CALLBACK)(int cmock_num_calls);
void configblockGetRadioAddress_StubWithCallback(CMOCK_configblockGetRadioAddress_CALLBACK Callback);
#define configblockGetCalibPitch_IgnoreAndReturn(cmock_retval) configblockGetCalibPitch_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockGetCalibPitch_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define configblockGetCalibPitch_ExpectAndReturn(cmock_retval) configblockGetCalibPitch_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockGetCalibPitch_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
typedef float (* CMOCK_configblockGetCalibPitch_CALLBACK)(int cmock_num_calls);
void configblockGetCalibPitch_StubWithCallback(CMOCK_configblockGetCalibPitch_CALLBACK Callback);
#define configblockGetCalibRoll_IgnoreAndReturn(cmock_retval) configblockGetCalibRoll_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configblockGetCalibRoll_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define configblockGetCalibRoll_ExpectAndReturn(cmock_retval) configblockGetCalibRoll_CMockExpectAndReturn(__LINE__, cmock_retval)
void configblockGetCalibRoll_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
typedef float (* CMOCK_configblockGetCalibRoll_CALLBACK)(int cmock_num_calls);
void configblockGetCalibRoll_StubWithCallback(CMOCK_configblockGetCalibRoll_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
