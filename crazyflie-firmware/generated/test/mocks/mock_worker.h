/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_WORKER_H
#define _MOCK_WORKER_H

#include "worker.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_worker_Init(void);
void mock_worker_Destroy(void);
void mock_worker_Verify(void);


typedef void(*cmock_worker_func_ptr1)(void*);


#define workerInit_Ignore() workerInit_CMockIgnore()
void workerInit_CMockIgnore(void);
#define workerInit_Expect() workerInit_CMockExpect(__LINE__)
void workerInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_workerInit_CALLBACK)(int cmock_num_calls);
void workerInit_StubWithCallback(CMOCK_workerInit_CALLBACK Callback);
#define workerTest_IgnoreAndReturn(cmock_retval) workerTest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void workerTest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define workerTest_ExpectAndReturn(cmock_retval) workerTest_CMockExpectAndReturn(__LINE__, cmock_retval)
void workerTest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_workerTest_CALLBACK)(int cmock_num_calls);
void workerTest_StubWithCallback(CMOCK_workerTest_CALLBACK Callback);
#define workerLoop_Ignore() workerLoop_CMockIgnore()
void workerLoop_CMockIgnore(void);
#define workerLoop_Expect() workerLoop_CMockExpect(__LINE__)
void workerLoop_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_workerLoop_CALLBACK)(int cmock_num_calls);
void workerLoop_StubWithCallback(CMOCK_workerLoop_CALLBACK Callback);
#define workerSchedule_IgnoreAndReturn(cmock_retval) workerSchedule_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void workerSchedule_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define workerSchedule_ExpectAndReturn(function, arg, cmock_retval) workerSchedule_CMockExpectAndReturn(__LINE__, function, arg, cmock_retval)
void workerSchedule_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cmock_worker_func_ptr1 function, void* arg, int cmock_to_return);
typedef int (* CMOCK_workerSchedule_CALLBACK)(cmock_worker_func_ptr1 function, void* arg, int cmock_num_calls);
void workerSchedule_StubWithCallback(CMOCK_workerSchedule_CALLBACK Callback);
#define workerSchedule_ExpectWithArrayAndReturn(function, arg, arg_Depth, cmock_retval) workerSchedule_CMockExpectWithArrayAndReturn(__LINE__, function, arg, arg_Depth, cmock_retval)
void workerSchedule_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, cmock_worker_func_ptr1 function, void* arg, int arg_Depth, int cmock_to_return);
#define workerSchedule_IgnoreArg_function() workerSchedule_CMockIgnoreArg_function(__LINE__)
void workerSchedule_CMockIgnoreArg_function(UNITY_LINE_TYPE cmock_line);
#define workerSchedule_IgnoreArg_arg() workerSchedule_CMockIgnoreArg_arg(__LINE__)
void workerSchedule_CMockIgnoreArg_arg(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
