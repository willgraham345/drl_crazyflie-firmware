/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_UART1_H
#define _MOCK_UART1_H

#include "uart1.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_uart1_Init(void);
void mock_uart1_Destroy(void);
void mock_uart1_Verify(void);




#define uart1Init_Ignore() uart1Init_CMockIgnore()
void uart1Init_CMockIgnore(void);
#define uart1Init_Expect(baudrate) uart1Init_CMockExpect(__LINE__, baudrate)
void uart1Init_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t baudrate);
typedef void (* CMOCK_uart1Init_CALLBACK)(const uint32_t baudrate, int cmock_num_calls);
void uart1Init_StubWithCallback(CMOCK_uart1Init_CALLBACK Callback);
#define uart1Init_IgnoreArg_baudrate() uart1Init_CMockIgnoreArg_baudrate(__LINE__)
void uart1Init_CMockIgnoreArg_baudrate(UNITY_LINE_TYPE cmock_line);
#define uart1InitWithParity_Ignore() uart1InitWithParity_CMockIgnore()
void uart1InitWithParity_CMockIgnore(void);
#define uart1InitWithParity_Expect(baudrate, parity) uart1InitWithParity_CMockExpect(__LINE__, baudrate, parity)
void uart1InitWithParity_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint32_t baudrate, const uart1Parity_t parity);
typedef void (* CMOCK_uart1InitWithParity_CALLBACK)(const uint32_t baudrate, const uart1Parity_t parity, int cmock_num_calls);
void uart1InitWithParity_StubWithCallback(CMOCK_uart1InitWithParity_CALLBACK Callback);
#define uart1InitWithParity_IgnoreArg_baudrate() uart1InitWithParity_CMockIgnoreArg_baudrate(__LINE__)
void uart1InitWithParity_CMockIgnoreArg_baudrate(UNITY_LINE_TYPE cmock_line);
#define uart1InitWithParity_IgnoreArg_parity() uart1InitWithParity_CMockIgnoreArg_parity(__LINE__)
void uart1InitWithParity_CMockIgnoreArg_parity(UNITY_LINE_TYPE cmock_line);
#define uart1Test_IgnoreAndReturn(cmock_retval) uart1Test_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart1Test_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart1Test_ExpectAndReturn(cmock_retval) uart1Test_CMockExpectAndReturn(__LINE__, cmock_retval)
void uart1Test_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_uart1Test_CALLBACK)(int cmock_num_calls);
void uart1Test_StubWithCallback(CMOCK_uart1Test_CALLBACK Callback);
#define uart1GetDataWithTimeout_IgnoreAndReturn(cmock_retval) uart1GetDataWithTimeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart1GetDataWithTimeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart1GetDataWithTimeout_ExpectAndReturn(c, timeoutTicks, cmock_retval) uart1GetDataWithTimeout_CMockExpectAndReturn(__LINE__, c, timeoutTicks, cmock_retval)
void uart1GetDataWithTimeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* c, const uint32_t timeoutTicks, bool cmock_to_return);
typedef bool (* CMOCK_uart1GetDataWithTimeout_CALLBACK)(uint8_t* c, const uint32_t timeoutTicks, int cmock_num_calls);
void uart1GetDataWithTimeout_StubWithCallback(CMOCK_uart1GetDataWithTimeout_CALLBACK Callback);
#define uart1GetDataWithTimeout_ExpectWithArrayAndReturn(c, c_Depth, timeoutTicks, cmock_retval) uart1GetDataWithTimeout_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, timeoutTicks, cmock_retval)
void uart1GetDataWithTimeout_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* c, int c_Depth, const uint32_t timeoutTicks, bool cmock_to_return);
#define uart1GetDataWithTimeout_IgnoreArg_c() uart1GetDataWithTimeout_CMockIgnoreArg_c(__LINE__)
void uart1GetDataWithTimeout_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define uart1GetDataWithTimeout_IgnoreArg_timeoutTicks() uart1GetDataWithTimeout_CMockIgnoreArg_timeoutTicks(__LINE__)
void uart1GetDataWithTimeout_CMockIgnoreArg_timeoutTicks(UNITY_LINE_TYPE cmock_line);
#define uart1GetDataWithDefaultTimeout_IgnoreAndReturn(cmock_retval) uart1GetDataWithDefaultTimeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart1GetDataWithDefaultTimeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart1GetDataWithDefaultTimeout_ExpectAndReturn(c, cmock_retval) uart1GetDataWithDefaultTimeout_CMockExpectAndReturn(__LINE__, c, cmock_retval)
void uart1GetDataWithDefaultTimeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* c, bool cmock_to_return);
typedef bool (* CMOCK_uart1GetDataWithDefaultTimeout_CALLBACK)(uint8_t* c, int cmock_num_calls);
void uart1GetDataWithDefaultTimeout_StubWithCallback(CMOCK_uart1GetDataWithDefaultTimeout_CALLBACK Callback);
#define uart1GetDataWithDefaultTimeout_ExpectWithArrayAndReturn(c, c_Depth, cmock_retval) uart1GetDataWithDefaultTimeout_CMockExpectWithArrayAndReturn(__LINE__, c, c_Depth, cmock_retval)
void uart1GetDataWithDefaultTimeout_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* c, int c_Depth, bool cmock_to_return);
#define uart1GetDataWithDefaultTimeout_IgnoreArg_c() uart1GetDataWithDefaultTimeout_CMockIgnoreArg_c(__LINE__)
void uart1GetDataWithDefaultTimeout_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define uart1SendData_Ignore() uart1SendData_CMockIgnore()
void uart1SendData_CMockIgnore(void);
#define uart1SendData_Expect(size, data) uart1SendData_CMockExpect(__LINE__, size, data)
void uart1SendData_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t size, uint8_t* data);
typedef void (* CMOCK_uart1SendData_CALLBACK)(uint32_t size, uint8_t* data, int cmock_num_calls);
void uart1SendData_StubWithCallback(CMOCK_uart1SendData_CALLBACK Callback);
#define uart1SendData_ExpectWithArray(size, data, data_Depth) uart1SendData_CMockExpectWithArray(__LINE__, size, data, data_Depth)
void uart1SendData_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint32_t size, uint8_t* data, int data_Depth);
#define uart1SendData_IgnoreArg_size() uart1SendData_CMockIgnoreArg_size(__LINE__)
void uart1SendData_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define uart1SendData_IgnoreArg_data() uart1SendData_CMockIgnoreArg_data(__LINE__)
void uart1SendData_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define uart1SendDataDmaBlocking_Ignore() uart1SendDataDmaBlocking_CMockIgnore()
void uart1SendDataDmaBlocking_CMockIgnore(void);
#define uart1SendDataDmaBlocking_Expect(size, data) uart1SendDataDmaBlocking_CMockExpect(__LINE__, size, data)
void uart1SendDataDmaBlocking_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t size, uint8_t* data);
typedef void (* CMOCK_uart1SendDataDmaBlocking_CALLBACK)(uint32_t size, uint8_t* data, int cmock_num_calls);
void uart1SendDataDmaBlocking_StubWithCallback(CMOCK_uart1SendDataDmaBlocking_CALLBACK Callback);
#define uart1SendDataDmaBlocking_ExpectWithArray(size, data, data_Depth) uart1SendDataDmaBlocking_CMockExpectWithArray(__LINE__, size, data, data_Depth)
void uart1SendDataDmaBlocking_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint32_t size, uint8_t* data, int data_Depth);
#define uart1SendDataDmaBlocking_IgnoreArg_size() uart1SendDataDmaBlocking_CMockIgnoreArg_size(__LINE__)
void uart1SendDataDmaBlocking_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define uart1SendDataDmaBlocking_IgnoreArg_data() uart1SendDataDmaBlocking_CMockIgnoreArg_data(__LINE__)
void uart1SendDataDmaBlocking_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define uart1Putchar_IgnoreAndReturn(cmock_retval) uart1Putchar_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart1Putchar_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uart1Putchar_ExpectAndReturn(ch, cmock_retval) uart1Putchar_CMockExpectAndReturn(__LINE__, ch, cmock_retval)
void uart1Putchar_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int ch, int cmock_to_return);
typedef int (* CMOCK_uart1Putchar_CALLBACK)(int ch, int cmock_num_calls);
void uart1Putchar_StubWithCallback(CMOCK_uart1Putchar_CALLBACK Callback);
#define uart1Putchar_IgnoreArg_ch() uart1Putchar_CMockIgnoreArg_ch(__LINE__)
void uart1Putchar_CMockIgnoreArg_ch(UNITY_LINE_TYPE cmock_line);
#define uart1Getchar_Ignore() uart1Getchar_CMockIgnore()
void uart1Getchar_CMockIgnore(void);
#define uart1Getchar_Expect(ch) uart1Getchar_CMockExpect(__LINE__, ch)
void uart1Getchar_CMockExpect(UNITY_LINE_TYPE cmock_line, char* ch);
typedef void (* CMOCK_uart1Getchar_CALLBACK)(char* ch, int cmock_num_calls);
void uart1Getchar_StubWithCallback(CMOCK_uart1Getchar_CALLBACK Callback);
#define uart1Getchar_IgnoreArg_ch() uart1Getchar_CMockIgnoreArg_ch(__LINE__)
void uart1Getchar_CMockIgnoreArg_ch(UNITY_LINE_TYPE cmock_line);
#define uart1DidOverrun_IgnoreAndReturn(cmock_retval) uart1DidOverrun_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart1DidOverrun_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define uart1DidOverrun_ExpectAndReturn(cmock_retval) uart1DidOverrun_CMockExpectAndReturn(__LINE__, cmock_retval)
void uart1DidOverrun_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_uart1DidOverrun_CALLBACK)(int cmock_num_calls);
void uart1DidOverrun_StubWithCallback(CMOCK_uart1DidOverrun_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
