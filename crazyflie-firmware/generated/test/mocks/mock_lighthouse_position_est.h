/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIGHTHOUSE_POSITION_EST_H
#define _MOCK_LIGHTHOUSE_POSITION_EST_H

#include "lighthouse_position_est.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_lighthouse_position_est_Init(void);
void mock_lighthouse_position_est_Destroy(void);
void mock_lighthouse_position_est_Verify(void);




#define lighthousePositionEstInit_Ignore() lighthousePositionEstInit_CMockIgnore()
void lighthousePositionEstInit_CMockIgnore(void);
#define lighthousePositionEstInit_Expect() lighthousePositionEstInit_CMockExpect(__LINE__)
void lighthousePositionEstInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_lighthousePositionEstInit_CALLBACK)(int cmock_num_calls);
void lighthousePositionEstInit_StubWithCallback(CMOCK_lighthousePositionEstInit_CALLBACK Callback);
#define lighthousePositionSetGeometryData_Ignore() lighthousePositionSetGeometryData_CMockIgnore()
void lighthousePositionSetGeometryData_CMockIgnore(void);
#define lighthousePositionSetGeometryData_Expect(baseStation, geometry) lighthousePositionSetGeometryData_CMockExpect(__LINE__, baseStation, geometry)
void lighthousePositionSetGeometryData_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t baseStation, const baseStationGeometry_t* geometry);
typedef void (* CMOCK_lighthousePositionSetGeometryData_CALLBACK)(const uint8_t baseStation, const baseStationGeometry_t* geometry, int cmock_num_calls);
void lighthousePositionSetGeometryData_StubWithCallback(CMOCK_lighthousePositionSetGeometryData_CALLBACK Callback);
#define lighthousePositionSetGeometryData_ExpectWithArray(baseStation, geometry, geometry_Depth) lighthousePositionSetGeometryData_CMockExpectWithArray(__LINE__, baseStation, geometry, geometry_Depth)
void lighthousePositionSetGeometryData_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const uint8_t baseStation, const baseStationGeometry_t* geometry, int geometry_Depth);
#define lighthousePositionSetGeometryData_IgnoreArg_baseStation() lighthousePositionSetGeometryData_CMockIgnoreArg_baseStation(__LINE__)
void lighthousePositionSetGeometryData_CMockIgnoreArg_baseStation(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionSetGeometryData_IgnoreArg_geometry() lighthousePositionSetGeometryData_CMockIgnoreArg_geometry(__LINE__)
void lighthousePositionSetGeometryData_CMockIgnoreArg_geometry(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionCalibrationDataWritten_Ignore() lighthousePositionCalibrationDataWritten_CMockIgnore()
void lighthousePositionCalibrationDataWritten_CMockIgnore(void);
#define lighthousePositionCalibrationDataWritten_Expect(baseStation) lighthousePositionCalibrationDataWritten_CMockExpect(__LINE__, baseStation)
void lighthousePositionCalibrationDataWritten_CMockExpect(UNITY_LINE_TYPE cmock_line, const uint8_t baseStation);
typedef void (* CMOCK_lighthousePositionCalibrationDataWritten_CALLBACK)(const uint8_t baseStation, int cmock_num_calls);
void lighthousePositionCalibrationDataWritten_StubWithCallback(CMOCK_lighthousePositionCalibrationDataWritten_CALLBACK Callback);
#define lighthousePositionCalibrationDataWritten_IgnoreArg_baseStation() lighthousePositionCalibrationDataWritten_CMockIgnoreArg_baseStation(__LINE__)
void lighthousePositionCalibrationDataWritten_CMockIgnoreArg_baseStation(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseCrossingBeams_Ignore() lighthousePositionEstimatePoseCrossingBeams_CMockIgnore()
void lighthousePositionEstimatePoseCrossingBeams_CMockIgnore(void);
#define lighthousePositionEstimatePoseCrossingBeams_Expect(state, angles, baseStation1, baseStation2) lighthousePositionEstimatePoseCrossingBeams_CMockExpect(__LINE__, state, angles, baseStation1, baseStation2)
void lighthousePositionEstimatePoseCrossingBeams_CMockExpect(UNITY_LINE_TYPE cmock_line, const pulseProcessor_t* state, pulseProcessorResult_t* angles, int baseStation1, int baseStation2);
typedef void (* CMOCK_lighthousePositionEstimatePoseCrossingBeams_CALLBACK)(const pulseProcessor_t* state, pulseProcessorResult_t* angles, int baseStation1, int baseStation2, int cmock_num_calls);
void lighthousePositionEstimatePoseCrossingBeams_StubWithCallback(CMOCK_lighthousePositionEstimatePoseCrossingBeams_CALLBACK Callback);
#define lighthousePositionEstimatePoseCrossingBeams_ExpectWithArray(state, state_Depth, angles, angles_Depth, baseStation1, baseStation2) lighthousePositionEstimatePoseCrossingBeams_CMockExpectWithArray(__LINE__, state, state_Depth, angles, angles_Depth, baseStation1, baseStation2)
void lighthousePositionEstimatePoseCrossingBeams_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const pulseProcessor_t* state, int state_Depth, pulseProcessorResult_t* angles, int angles_Depth, int baseStation1, int baseStation2);
#define lighthousePositionEstimatePoseCrossingBeams_IgnoreArg_state() lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_state(__LINE__)
void lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseCrossingBeams_IgnoreArg_angles() lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_angles(__LINE__)
void lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_angles(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseCrossingBeams_IgnoreArg_baseStation1() lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_baseStation1(__LINE__)
void lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_baseStation1(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseCrossingBeams_IgnoreArg_baseStation2() lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_baseStation2(__LINE__)
void lighthousePositionEstimatePoseCrossingBeams_CMockIgnoreArg_baseStation2(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseSweeps_Ignore() lighthousePositionEstimatePoseSweeps_CMockIgnore()
void lighthousePositionEstimatePoseSweeps_CMockIgnore(void);
#define lighthousePositionEstimatePoseSweeps_Expect(state, angles, baseStation) lighthousePositionEstimatePoseSweeps_CMockExpect(__LINE__, state, angles, baseStation)
void lighthousePositionEstimatePoseSweeps_CMockExpect(UNITY_LINE_TYPE cmock_line, const pulseProcessor_t* state, pulseProcessorResult_t* angles, int baseStation);
typedef void (* CMOCK_lighthousePositionEstimatePoseSweeps_CALLBACK)(const pulseProcessor_t* state, pulseProcessorResult_t* angles, int baseStation, int cmock_num_calls);
void lighthousePositionEstimatePoseSweeps_StubWithCallback(CMOCK_lighthousePositionEstimatePoseSweeps_CALLBACK Callback);
#define lighthousePositionEstimatePoseSweeps_ExpectWithArray(state, state_Depth, angles, angles_Depth, baseStation) lighthousePositionEstimatePoseSweeps_CMockExpectWithArray(__LINE__, state, state_Depth, angles, angles_Depth, baseStation)
void lighthousePositionEstimatePoseSweeps_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const pulseProcessor_t* state, int state_Depth, pulseProcessorResult_t* angles, int angles_Depth, int baseStation);
#define lighthousePositionEstimatePoseSweeps_IgnoreArg_state() lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_state(__LINE__)
void lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseSweeps_IgnoreArg_angles() lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_angles(__LINE__)
void lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_angles(UNITY_LINE_TYPE cmock_line);
#define lighthousePositionEstimatePoseSweeps_IgnoreArg_baseStation() lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_baseStation(__LINE__)
void lighthousePositionEstimatePoseSweeps_CMockIgnoreArg_baseStation(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
