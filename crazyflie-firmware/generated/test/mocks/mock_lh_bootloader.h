/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LH_BOOTLOADER_H
#define _MOCK_LH_BOOTLOADER_H

#include "lh_bootloader.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_lh_bootloader_Init(void);
void mock_lh_bootloader_Destroy(void);
void mock_lh_bootloader_Verify(void);




#define lhblInit_IgnoreAndReturn(cmock_retval) lhblInit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblInit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblInit_ExpectAndReturn(cmock_retval) lhblInit_CMockExpectAndReturn(__LINE__, cmock_retval)
void lhblInit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_lhblInit_CALLBACK)(int cmock_num_calls);
void lhblInit_StubWithCallback(CMOCK_lhblInit_CALLBACK Callback);
#define lhblBootToFW_IgnoreAndReturn(cmock_retval) lhblBootToFW_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblBootToFW_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblBootToFW_ExpectAndReturn(cmock_retval) lhblBootToFW_CMockExpectAndReturn(__LINE__, cmock_retval)
void lhblBootToFW_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_lhblBootToFW_CALLBACK)(int cmock_num_calls);
void lhblBootToFW_StubWithCallback(CMOCK_lhblBootToFW_CALLBACK Callback);
#define lhblGetVersion_IgnoreAndReturn(cmock_retval) lhblGetVersion_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblGetVersion_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblGetVersion_ExpectAndReturn(version, cmock_retval) lhblGetVersion_CMockExpectAndReturn(__LINE__, version, cmock_retval)
void lhblGetVersion_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* version, bool cmock_to_return);
typedef bool (* CMOCK_lhblGetVersion_CALLBACK)(uint8_t* version, int cmock_num_calls);
void lhblGetVersion_StubWithCallback(CMOCK_lhblGetVersion_CALLBACK Callback);
#define lhblGetVersion_ExpectWithArrayAndReturn(version, version_Depth, cmock_retval) lhblGetVersion_CMockExpectWithArrayAndReturn(__LINE__, version, version_Depth, cmock_retval)
void lhblGetVersion_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* version, int version_Depth, bool cmock_to_return);
#define lhblGetVersion_IgnoreArg_version() lhblGetVersion_CMockIgnoreArg_version(__LINE__)
void lhblGetVersion_CMockIgnoreArg_version(UNITY_LINE_TYPE cmock_line);
#define lhblFlashRead_IgnoreAndReturn(cmock_retval) lhblFlashRead_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblFlashRead_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblFlashRead_ExpectAndReturn(address, length, data, cmock_retval) lhblFlashRead_CMockExpectAndReturn(__LINE__, address, length, data, cmock_retval)
void lhblFlashRead_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t address, uint16_t length, uint8_t* data, bool cmock_to_return);
typedef bool (* CMOCK_lhblFlashRead_CALLBACK)(uint32_t address, uint16_t length, uint8_t* data, int cmock_num_calls);
void lhblFlashRead_StubWithCallback(CMOCK_lhblFlashRead_CALLBACK Callback);
#define lhblFlashRead_ExpectWithArrayAndReturn(address, length, data, data_Depth, cmock_retval) lhblFlashRead_CMockExpectWithArrayAndReturn(__LINE__, address, length, data, data_Depth, cmock_retval)
void lhblFlashRead_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t address, uint16_t length, uint8_t* data, int data_Depth, bool cmock_to_return);
#define lhblFlashRead_IgnoreArg_address() lhblFlashRead_CMockIgnoreArg_address(__LINE__)
void lhblFlashRead_CMockIgnoreArg_address(UNITY_LINE_TYPE cmock_line);
#define lhblFlashRead_IgnoreArg_length() lhblFlashRead_CMockIgnoreArg_length(__LINE__)
void lhblFlashRead_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define lhblFlashRead_IgnoreArg_data() lhblFlashRead_CMockIgnoreArg_data(__LINE__)
void lhblFlashRead_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define lhblFlashWritePage_IgnoreAndReturn(cmock_retval) lhblFlashWritePage_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblFlashWritePage_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblFlashWritePage_ExpectAndReturn(address, length, data, cmock_retval) lhblFlashWritePage_CMockExpectAndReturn(__LINE__, address, length, data, cmock_retval)
void lhblFlashWritePage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t address, uint16_t length, const uint8_t* data, bool cmock_to_return);
typedef bool (* CMOCK_lhblFlashWritePage_CALLBACK)(uint32_t address, uint16_t length, const uint8_t* data, int cmock_num_calls);
void lhblFlashWritePage_StubWithCallback(CMOCK_lhblFlashWritePage_CALLBACK Callback);
#define lhblFlashWritePage_ExpectWithArrayAndReturn(address, length, data, data_Depth, cmock_retval) lhblFlashWritePage_CMockExpectWithArrayAndReturn(__LINE__, address, length, data, data_Depth, cmock_retval)
void lhblFlashWritePage_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t address, uint16_t length, const uint8_t* data, int data_Depth, bool cmock_to_return);
#define lhblFlashWritePage_IgnoreArg_address() lhblFlashWritePage_CMockIgnoreArg_address(__LINE__)
void lhblFlashWritePage_CMockIgnoreArg_address(UNITY_LINE_TYPE cmock_line);
#define lhblFlashWritePage_IgnoreArg_length() lhblFlashWritePage_CMockIgnoreArg_length(__LINE__)
void lhblFlashWritePage_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define lhblFlashWritePage_IgnoreArg_data() lhblFlashWritePage_CMockIgnoreArg_data(__LINE__)
void lhblFlashWritePage_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define lhblFlashWriteFW_IgnoreAndReturn(cmock_retval) lhblFlashWriteFW_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblFlashWriteFW_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblFlashWriteFW_ExpectAndReturn(data, length, cmock_retval) lhblFlashWriteFW_CMockExpectAndReturn(__LINE__, data, length, cmock_retval)
void lhblFlashWriteFW_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, uint32_t length, bool cmock_to_return);
typedef bool (* CMOCK_lhblFlashWriteFW_CALLBACK)(uint8_t* data, uint32_t length, int cmock_num_calls);
void lhblFlashWriteFW_StubWithCallback(CMOCK_lhblFlashWriteFW_CALLBACK Callback);
#define lhblFlashWriteFW_ExpectWithArrayAndReturn(data, data_Depth, length, cmock_retval) lhblFlashWriteFW_CMockExpectWithArrayAndReturn(__LINE__, data, data_Depth, length, cmock_retval)
void lhblFlashWriteFW_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, int data_Depth, uint32_t length, bool cmock_to_return);
#define lhblFlashWriteFW_IgnoreArg_data() lhblFlashWriteFW_CMockIgnoreArg_data(__LINE__)
void lhblFlashWriteFW_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define lhblFlashWriteFW_IgnoreArg_length() lhblFlashWriteFW_CMockIgnoreArg_length(__LINE__)
void lhblFlashWriteFW_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define lhblFlashEraseFirmware_IgnoreAndReturn(cmock_retval) lhblFlashEraseFirmware_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblFlashEraseFirmware_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblFlashEraseFirmware_ExpectAndReturn(cmock_retval) lhblFlashEraseFirmware_CMockExpectAndReturn(__LINE__, cmock_retval)
void lhblFlashEraseFirmware_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_lhblFlashEraseFirmware_CALLBACK)(int cmock_num_calls);
void lhblFlashEraseFirmware_StubWithCallback(CMOCK_lhblFlashEraseFirmware_CALLBACK Callback);
#define lhblFlashWakeup_IgnoreAndReturn(cmock_retval) lhblFlashWakeup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lhblFlashWakeup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define lhblFlashWakeup_ExpectAndReturn(cmock_retval) lhblFlashWakeup_CMockExpectAndReturn(__LINE__, cmock_retval)
void lhblFlashWakeup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_lhblFlashWakeup_CALLBACK)(int cmock_num_calls);
void lhblFlashWakeup_StubWithCallback(CMOCK_lhblFlashWakeup_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
