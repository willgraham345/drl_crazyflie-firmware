/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CLOCKCORRECTIONENGINE_H
#define _MOCK_CLOCKCORRECTIONENGINE_H

#include "clockCorrectionEngine.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_clockCorrectionEngine_Init(void);
void mock_clockCorrectionEngine_Destroy(void);
void mock_clockCorrectionEngine_Verify(void);




#define clockCorrectionEngineGet_IgnoreAndReturn(cmock_retval) clockCorrectionEngineGet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void clockCorrectionEngineGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, double cmock_to_return);
#define clockCorrectionEngineGet_ExpectAndReturn(storage, cmock_retval) clockCorrectionEngineGet_CMockExpectAndReturn(__LINE__, storage, cmock_retval)
void clockCorrectionEngineGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const clockCorrectionStorage_t* storage, double cmock_to_return);
typedef double (* CMOCK_clockCorrectionEngineGet_CALLBACK)(const clockCorrectionStorage_t* storage, int cmock_num_calls);
void clockCorrectionEngineGet_StubWithCallback(CMOCK_clockCorrectionEngineGet_CALLBACK Callback);
#define clockCorrectionEngineGet_ExpectWithArrayAndReturn(storage, storage_Depth, cmock_retval) clockCorrectionEngineGet_CMockExpectWithArrayAndReturn(__LINE__, storage, storage_Depth, cmock_retval)
void clockCorrectionEngineGet_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const clockCorrectionStorage_t* storage, int storage_Depth, double cmock_to_return);
#define clockCorrectionEngineGet_IgnoreArg_storage() clockCorrectionEngineGet_CMockIgnoreArg_storage(__LINE__)
void clockCorrectionEngineGet_CMockIgnoreArg_storage(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineCalculate_IgnoreAndReturn(cmock_retval) clockCorrectionEngineCalculate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void clockCorrectionEngineCalculate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, double cmock_to_return);
#define clockCorrectionEngineCalculate_ExpectAndReturn(new_t_in_cl_reference, old_t_in_cl_reference, new_t_in_cl_x, old_t_in_cl_x, mask, cmock_retval) clockCorrectionEngineCalculate_CMockExpectAndReturn(__LINE__, new_t_in_cl_reference, old_t_in_cl_reference, new_t_in_cl_x, old_t_in_cl_x, mask, cmock_retval)
void clockCorrectionEngineCalculate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const uint64_t new_t_in_cl_reference, const uint64_t old_t_in_cl_reference, const uint64_t new_t_in_cl_x, const uint64_t old_t_in_cl_x, const uint64_t mask, double cmock_to_return);
typedef double (* CMOCK_clockCorrectionEngineCalculate_CALLBACK)(const uint64_t new_t_in_cl_reference, const uint64_t old_t_in_cl_reference, const uint64_t new_t_in_cl_x, const uint64_t old_t_in_cl_x, const uint64_t mask, int cmock_num_calls);
void clockCorrectionEngineCalculate_StubWithCallback(CMOCK_clockCorrectionEngineCalculate_CALLBACK Callback);
#define clockCorrectionEngineCalculate_IgnoreArg_new_t_in_cl_reference() clockCorrectionEngineCalculate_CMockIgnoreArg_new_t_in_cl_reference(__LINE__)
void clockCorrectionEngineCalculate_CMockIgnoreArg_new_t_in_cl_reference(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineCalculate_IgnoreArg_old_t_in_cl_reference() clockCorrectionEngineCalculate_CMockIgnoreArg_old_t_in_cl_reference(__LINE__)
void clockCorrectionEngineCalculate_CMockIgnoreArg_old_t_in_cl_reference(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineCalculate_IgnoreArg_new_t_in_cl_x() clockCorrectionEngineCalculate_CMockIgnoreArg_new_t_in_cl_x(__LINE__)
void clockCorrectionEngineCalculate_CMockIgnoreArg_new_t_in_cl_x(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineCalculate_IgnoreArg_old_t_in_cl_x() clockCorrectionEngineCalculate_CMockIgnoreArg_old_t_in_cl_x(__LINE__)
void clockCorrectionEngineCalculate_CMockIgnoreArg_old_t_in_cl_x(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineCalculate_IgnoreArg_mask() clockCorrectionEngineCalculate_CMockIgnoreArg_mask(__LINE__)
void clockCorrectionEngineCalculate_CMockIgnoreArg_mask(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineUpdate_IgnoreAndReturn(cmock_retval) clockCorrectionEngineUpdate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void clockCorrectionEngineUpdate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define clockCorrectionEngineUpdate_ExpectAndReturn(storage, clockCorrectionCandidate, cmock_retval) clockCorrectionEngineUpdate_CMockExpectAndReturn(__LINE__, storage, clockCorrectionCandidate, cmock_retval)
void clockCorrectionEngineUpdate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, clockCorrectionStorage_t* storage, const double clockCorrectionCandidate, bool cmock_to_return);
typedef bool (* CMOCK_clockCorrectionEngineUpdate_CALLBACK)(clockCorrectionStorage_t* storage, const double clockCorrectionCandidate, int cmock_num_calls);
void clockCorrectionEngineUpdate_StubWithCallback(CMOCK_clockCorrectionEngineUpdate_CALLBACK Callback);
#define clockCorrectionEngineUpdate_ExpectWithArrayAndReturn(storage, storage_Depth, clockCorrectionCandidate, cmock_retval) clockCorrectionEngineUpdate_CMockExpectWithArrayAndReturn(__LINE__, storage, storage_Depth, clockCorrectionCandidate, cmock_retval)
void clockCorrectionEngineUpdate_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, clockCorrectionStorage_t* storage, int storage_Depth, const double clockCorrectionCandidate, bool cmock_to_return);
#define clockCorrectionEngineUpdate_IgnoreArg_storage() clockCorrectionEngineUpdate_CMockIgnoreArg_storage(__LINE__)
void clockCorrectionEngineUpdate_CMockIgnoreArg_storage(UNITY_LINE_TYPE cmock_line);
#define clockCorrectionEngineUpdate_IgnoreArg_clockCorrectionCandidate() clockCorrectionEngineUpdate_CMockIgnoreArg_clockCorrectionCandidate(__LINE__)
void clockCorrectionEngineUpdate_CMockIgnoreArg_clockCorrectionCandidate(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
