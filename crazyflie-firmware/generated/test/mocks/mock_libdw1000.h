/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIBDW1000_H
#define _MOCK_LIBDW1000_H

#include "libdw1000.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_libdw1000_Init(void);
void mock_libdw1000_Destroy(void);
void mock_libdw1000_Verify(void);




#define dwInit_Ignore() dwInit_CMockIgnore()
void dwInit_CMockIgnore(void);
#define dwInit_Expect(dev, ops) dwInit_CMockExpect(__LINE__, dev, ops)
void dwInit_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwOps_t* ops);
typedef void (* CMOCK_dwInit_CALLBACK)(dwDevice_t* dev, dwOps_t* ops, int cmock_num_calls);
void dwInit_StubWithCallback(CMOCK_dwInit_CALLBACK Callback);
#define dwInit_ExpectWithArray(dev, dev_Depth, ops, ops_Depth) dwInit_CMockExpectWithArray(__LINE__, dev, dev_Depth, ops, ops_Depth)
void dwInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwOps_t* ops, int ops_Depth);
#define dwInit_IgnoreArg_dev() dwInit_CMockIgnoreArg_dev(__LINE__)
void dwInit_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInit_IgnoreArg_ops() dwInit_CMockIgnoreArg_ops(__LINE__)
void dwInit_CMockIgnoreArg_ops(UNITY_LINE_TYPE cmock_line);
#define dwSetUserdata_Ignore() dwSetUserdata_CMockIgnore()
void dwSetUserdata_CMockIgnore(void);
#define dwSetUserdata_Expect(dev, userdata) dwSetUserdata_CMockExpect(__LINE__, dev, userdata)
void dwSetUserdata_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, void* userdata);
typedef void (* CMOCK_dwSetUserdata_CALLBACK)(dwDevice_t* dev, void* userdata, int cmock_num_calls);
void dwSetUserdata_StubWithCallback(CMOCK_dwSetUserdata_CALLBACK Callback);
#define dwSetUserdata_ExpectWithArray(dev, dev_Depth, userdata, userdata_Depth) dwSetUserdata_CMockExpectWithArray(__LINE__, dev, dev_Depth, userdata, userdata_Depth)
void dwSetUserdata_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, void* userdata, int userdata_Depth);
#define dwSetUserdata_IgnoreArg_dev() dwSetUserdata_CMockIgnoreArg_dev(__LINE__)
void dwSetUserdata_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetUserdata_IgnoreArg_userdata() dwSetUserdata_CMockIgnoreArg_userdata(__LINE__)
void dwSetUserdata_CMockIgnoreArg_userdata(UNITY_LINE_TYPE cmock_line);
#define dwGetUserdata_IgnoreAndReturn(cmock_retval) dwGetUserdata_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetUserdata_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define dwGetUserdata_ExpectAndReturn(dev, cmock_retval) dwGetUserdata_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetUserdata_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, void* cmock_to_return);
typedef void* (* CMOCK_dwGetUserdata_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetUserdata_StubWithCallback(CMOCK_dwGetUserdata_CALLBACK Callback);
#define dwGetUserdata_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetUserdata_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetUserdata_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, void* cmock_to_return);
#define dwGetUserdata_IgnoreArg_dev() dwGetUserdata_CMockIgnoreArg_dev(__LINE__)
void dwGetUserdata_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwConfigure_IgnoreAndReturn(cmock_retval) dwConfigure_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwConfigure_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define dwConfigure_ExpectAndReturn(dev, cmock_retval) dwConfigure_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwConfigure_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int cmock_to_return);
typedef int (* CMOCK_dwConfigure_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwConfigure_StubWithCallback(CMOCK_dwConfigure_CALLBACK Callback);
#define dwConfigure_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwConfigure_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwConfigure_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, int cmock_to_return);
#define dwConfigure_IgnoreArg_dev() dwConfigure_CMockIgnoreArg_dev(__LINE__)
void dwConfigure_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetDeviceId_IgnoreAndReturn(cmock_retval) dwGetDeviceId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetDeviceId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define dwGetDeviceId_ExpectAndReturn(dev, cmock_retval) dwGetDeviceId_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetDeviceId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_dwGetDeviceId_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetDeviceId_StubWithCallback(CMOCK_dwGetDeviceId_CALLBACK Callback);
#define dwGetDeviceId_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetDeviceId_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetDeviceId_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint32_t cmock_to_return);
#define dwGetDeviceId_IgnoreArg_dev() dwGetDeviceId_CMockIgnoreArg_dev(__LINE__)
void dwGetDeviceId_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwEnableAllLeds_Ignore() dwEnableAllLeds_CMockIgnore()
void dwEnableAllLeds_CMockIgnore(void);
#define dwEnableAllLeds_Expect(dev) dwEnableAllLeds_CMockExpect(__LINE__, dev)
void dwEnableAllLeds_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwEnableAllLeds_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwEnableAllLeds_StubWithCallback(CMOCK_dwEnableAllLeds_CALLBACK Callback);
#define dwEnableAllLeds_ExpectWithArray(dev, dev_Depth) dwEnableAllLeds_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwEnableAllLeds_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwEnableAllLeds_IgnoreArg_dev() dwEnableAllLeds_CMockIgnoreArg_dev(__LINE__)
void dwEnableAllLeds_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwEnableClock_Ignore() dwEnableClock_CMockIgnore()
void dwEnableClock_CMockIgnore(void);
#define dwEnableClock_Expect(dev, clock) dwEnableClock_CMockExpect(__LINE__, dev, clock)
void dwEnableClock_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwClock_t clock);
typedef void (* CMOCK_dwEnableClock_CALLBACK)(dwDevice_t* dev, dwClock_t clock, int cmock_num_calls);
void dwEnableClock_StubWithCallback(CMOCK_dwEnableClock_CALLBACK Callback);
#define dwEnableClock_ExpectWithArray(dev, dev_Depth, clock) dwEnableClock_CMockExpectWithArray(__LINE__, dev, dev_Depth, clock)
void dwEnableClock_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwClock_t clock);
#define dwEnableClock_IgnoreArg_dev() dwEnableClock_CMockIgnoreArg_dev(__LINE__)
void dwEnableClock_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwEnableClock_IgnoreArg_clock() dwEnableClock_CMockIgnoreArg_clock(__LINE__)
void dwEnableClock_CMockIgnoreArg_clock(UNITY_LINE_TYPE cmock_line);
#define dwSoftReset_Ignore() dwSoftReset_CMockIgnore()
void dwSoftReset_CMockIgnore(void);
#define dwSoftReset_Expect(dev) dwSoftReset_CMockExpect(__LINE__, dev)
void dwSoftReset_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwSoftReset_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwSoftReset_StubWithCallback(CMOCK_dwSoftReset_CALLBACK Callback);
#define dwSoftReset_ExpectWithArray(dev, dev_Depth) dwSoftReset_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwSoftReset_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwSoftReset_IgnoreArg_dev() dwSoftReset_CMockIgnoreArg_dev(__LINE__)
void dwSoftReset_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwManageLDE_Ignore() dwManageLDE_CMockIgnore()
void dwManageLDE_CMockIgnore(void);
#define dwManageLDE_Expect(dev) dwManageLDE_CMockExpect(__LINE__, dev)
void dwManageLDE_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwManageLDE_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwManageLDE_StubWithCallback(CMOCK_dwManageLDE_CALLBACK Callback);
#define dwManageLDE_ExpectWithArray(dev, dev_Depth) dwManageLDE_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwManageLDE_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwManageLDE_IgnoreArg_dev() dwManageLDE_CMockIgnoreArg_dev(__LINE__)
void dwManageLDE_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadSystemConfigurationRegister_Ignore() dwReadSystemConfigurationRegister_CMockIgnore()
void dwReadSystemConfigurationRegister_CMockIgnore(void);
#define dwReadSystemConfigurationRegister_Expect(dev) dwReadSystemConfigurationRegister_CMockExpect(__LINE__, dev)
void dwReadSystemConfigurationRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadSystemConfigurationRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadSystemConfigurationRegister_StubWithCallback(CMOCK_dwReadSystemConfigurationRegister_CALLBACK Callback);
#define dwReadSystemConfigurationRegister_ExpectWithArray(dev, dev_Depth) dwReadSystemConfigurationRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadSystemConfigurationRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadSystemConfigurationRegister_IgnoreArg_dev() dwReadSystemConfigurationRegister_CMockIgnoreArg_dev(__LINE__)
void dwReadSystemConfigurationRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWriteSystemConfigurationRegister_Ignore() dwWriteSystemConfigurationRegister_CMockIgnore()
void dwWriteSystemConfigurationRegister_CMockIgnore(void);
#define dwWriteSystemConfigurationRegister_Expect(dev) dwWriteSystemConfigurationRegister_CMockExpect(__LINE__, dev)
void dwWriteSystemConfigurationRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwWriteSystemConfigurationRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwWriteSystemConfigurationRegister_StubWithCallback(CMOCK_dwWriteSystemConfigurationRegister_CALLBACK Callback);
#define dwWriteSystemConfigurationRegister_ExpectWithArray(dev, dev_Depth) dwWriteSystemConfigurationRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwWriteSystemConfigurationRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwWriteSystemConfigurationRegister_IgnoreArg_dev() dwWriteSystemConfigurationRegister_CMockIgnoreArg_dev(__LINE__)
void dwWriteSystemConfigurationRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadSystemEventStatusRegister_Ignore() dwReadSystemEventStatusRegister_CMockIgnore()
void dwReadSystemEventStatusRegister_CMockIgnore(void);
#define dwReadSystemEventStatusRegister_Expect(dev) dwReadSystemEventStatusRegister_CMockExpect(__LINE__, dev)
void dwReadSystemEventStatusRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadSystemEventStatusRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadSystemEventStatusRegister_StubWithCallback(CMOCK_dwReadSystemEventStatusRegister_CALLBACK Callback);
#define dwReadSystemEventStatusRegister_ExpectWithArray(dev, dev_Depth) dwReadSystemEventStatusRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadSystemEventStatusRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadSystemEventStatusRegister_IgnoreArg_dev() dwReadSystemEventStatusRegister_CMockIgnoreArg_dev(__LINE__)
void dwReadSystemEventStatusRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadNetworkIdAndDeviceAddress_Ignore() dwReadNetworkIdAndDeviceAddress_CMockIgnore()
void dwReadNetworkIdAndDeviceAddress_CMockIgnore(void);
#define dwReadNetworkIdAndDeviceAddress_Expect(dev) dwReadNetworkIdAndDeviceAddress_CMockExpect(__LINE__, dev)
void dwReadNetworkIdAndDeviceAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadNetworkIdAndDeviceAddress_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadNetworkIdAndDeviceAddress_StubWithCallback(CMOCK_dwReadNetworkIdAndDeviceAddress_CALLBACK Callback);
#define dwReadNetworkIdAndDeviceAddress_ExpectWithArray(dev, dev_Depth) dwReadNetworkIdAndDeviceAddress_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadNetworkIdAndDeviceAddress_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadNetworkIdAndDeviceAddress_IgnoreArg_dev() dwReadNetworkIdAndDeviceAddress_CMockIgnoreArg_dev(__LINE__)
void dwReadNetworkIdAndDeviceAddress_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWriteNetworkIdAndDeviceAddress_Ignore() dwWriteNetworkIdAndDeviceAddress_CMockIgnore()
void dwWriteNetworkIdAndDeviceAddress_CMockIgnore(void);
#define dwWriteNetworkIdAndDeviceAddress_Expect(dev) dwWriteNetworkIdAndDeviceAddress_CMockExpect(__LINE__, dev)
void dwWriteNetworkIdAndDeviceAddress_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwWriteNetworkIdAndDeviceAddress_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwWriteNetworkIdAndDeviceAddress_StubWithCallback(CMOCK_dwWriteNetworkIdAndDeviceAddress_CALLBACK Callback);
#define dwWriteNetworkIdAndDeviceAddress_ExpectWithArray(dev, dev_Depth) dwWriteNetworkIdAndDeviceAddress_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwWriteNetworkIdAndDeviceAddress_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwWriteNetworkIdAndDeviceAddress_IgnoreArg_dev() dwWriteNetworkIdAndDeviceAddress_CMockIgnoreArg_dev(__LINE__)
void dwWriteNetworkIdAndDeviceAddress_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadSystemEventMaskRegister_Ignore() dwReadSystemEventMaskRegister_CMockIgnore()
void dwReadSystemEventMaskRegister_CMockIgnore(void);
#define dwReadSystemEventMaskRegister_Expect(dev) dwReadSystemEventMaskRegister_CMockExpect(__LINE__, dev)
void dwReadSystemEventMaskRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadSystemEventMaskRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadSystemEventMaskRegister_StubWithCallback(CMOCK_dwReadSystemEventMaskRegister_CALLBACK Callback);
#define dwReadSystemEventMaskRegister_ExpectWithArray(dev, dev_Depth) dwReadSystemEventMaskRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadSystemEventMaskRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadSystemEventMaskRegister_IgnoreArg_dev() dwReadSystemEventMaskRegister_CMockIgnoreArg_dev(__LINE__)
void dwReadSystemEventMaskRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWriteSystemEventMaskRegister_Ignore() dwWriteSystemEventMaskRegister_CMockIgnore()
void dwWriteSystemEventMaskRegister_CMockIgnore(void);
#define dwWriteSystemEventMaskRegister_Expect(dev) dwWriteSystemEventMaskRegister_CMockExpect(__LINE__, dev)
void dwWriteSystemEventMaskRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwWriteSystemEventMaskRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwWriteSystemEventMaskRegister_StubWithCallback(CMOCK_dwWriteSystemEventMaskRegister_CALLBACK Callback);
#define dwWriteSystemEventMaskRegister_ExpectWithArray(dev, dev_Depth) dwWriteSystemEventMaskRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwWriteSystemEventMaskRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwWriteSystemEventMaskRegister_IgnoreArg_dev() dwWriteSystemEventMaskRegister_CMockIgnoreArg_dev(__LINE__)
void dwWriteSystemEventMaskRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadChannelControlRegister_Ignore() dwReadChannelControlRegister_CMockIgnore()
void dwReadChannelControlRegister_CMockIgnore(void);
#define dwReadChannelControlRegister_Expect(dev) dwReadChannelControlRegister_CMockExpect(__LINE__, dev)
void dwReadChannelControlRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadChannelControlRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadChannelControlRegister_StubWithCallback(CMOCK_dwReadChannelControlRegister_CALLBACK Callback);
#define dwReadChannelControlRegister_ExpectWithArray(dev, dev_Depth) dwReadChannelControlRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadChannelControlRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadChannelControlRegister_IgnoreArg_dev() dwReadChannelControlRegister_CMockIgnoreArg_dev(__LINE__)
void dwReadChannelControlRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWriteChannelControlRegister_Ignore() dwWriteChannelControlRegister_CMockIgnore()
void dwWriteChannelControlRegister_CMockIgnore(void);
#define dwWriteChannelControlRegister_Expect(dev) dwWriteChannelControlRegister_CMockExpect(__LINE__, dev)
void dwWriteChannelControlRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwWriteChannelControlRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwWriteChannelControlRegister_StubWithCallback(CMOCK_dwWriteChannelControlRegister_CALLBACK Callback);
#define dwWriteChannelControlRegister_ExpectWithArray(dev, dev_Depth) dwWriteChannelControlRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwWriteChannelControlRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwWriteChannelControlRegister_IgnoreArg_dev() dwWriteChannelControlRegister_CMockIgnoreArg_dev(__LINE__)
void dwWriteChannelControlRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReadTransmitFrameControlRegister_Ignore() dwReadTransmitFrameControlRegister_CMockIgnore()
void dwReadTransmitFrameControlRegister_CMockIgnore(void);
#define dwReadTransmitFrameControlRegister_Expect(dev) dwReadTransmitFrameControlRegister_CMockExpect(__LINE__, dev)
void dwReadTransmitFrameControlRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwReadTransmitFrameControlRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwReadTransmitFrameControlRegister_StubWithCallback(CMOCK_dwReadTransmitFrameControlRegister_CALLBACK Callback);
#define dwReadTransmitFrameControlRegister_ExpectWithArray(dev, dev_Depth) dwReadTransmitFrameControlRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwReadTransmitFrameControlRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwReadTransmitFrameControlRegister_IgnoreArg_dev() dwReadTransmitFrameControlRegister_CMockIgnoreArg_dev(__LINE__)
void dwReadTransmitFrameControlRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWriteTransmitFrameControlRegister_Ignore() dwWriteTransmitFrameControlRegister_CMockIgnore()
void dwWriteTransmitFrameControlRegister_CMockIgnore(void);
#define dwWriteTransmitFrameControlRegister_Expect(dev) dwWriteTransmitFrameControlRegister_CMockExpect(__LINE__, dev)
void dwWriteTransmitFrameControlRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwWriteTransmitFrameControlRegister_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwWriteTransmitFrameControlRegister_StubWithCallback(CMOCK_dwWriteTransmitFrameControlRegister_CALLBACK Callback);
#define dwWriteTransmitFrameControlRegister_ExpectWithArray(dev, dev_Depth) dwWriteTransmitFrameControlRegister_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwWriteTransmitFrameControlRegister_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwWriteTransmitFrameControlRegister_IgnoreArg_dev() dwWriteTransmitFrameControlRegister_CMockIgnoreArg_dev(__LINE__)
void dwWriteTransmitFrameControlRegister_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetReceiveWaitTimeout_Ignore() dwSetReceiveWaitTimeout_CMockIgnore()
void dwSetReceiveWaitTimeout_CMockIgnore(void);
#define dwSetReceiveWaitTimeout_Expect(dev, timeout) dwSetReceiveWaitTimeout_CMockExpect(__LINE__, dev, timeout)
void dwSetReceiveWaitTimeout_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint16_t timeout);
typedef void (* CMOCK_dwSetReceiveWaitTimeout_CALLBACK)(dwDevice_t* dev, uint16_t timeout, int cmock_num_calls);
void dwSetReceiveWaitTimeout_StubWithCallback(CMOCK_dwSetReceiveWaitTimeout_CALLBACK Callback);
#define dwSetReceiveWaitTimeout_ExpectWithArray(dev, dev_Depth, timeout) dwSetReceiveWaitTimeout_CMockExpectWithArray(__LINE__, dev, dev_Depth, timeout)
void dwSetReceiveWaitTimeout_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint16_t timeout);
#define dwSetReceiveWaitTimeout_IgnoreArg_dev() dwSetReceiveWaitTimeout_CMockIgnoreArg_dev(__LINE__)
void dwSetReceiveWaitTimeout_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetReceiveWaitTimeout_IgnoreArg_timeout() dwSetReceiveWaitTimeout_CMockIgnoreArg_timeout(__LINE__)
void dwSetReceiveWaitTimeout_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilter_Ignore() dwSetFrameFilter_CMockIgnore()
void dwSetFrameFilter_CMockIgnore(void);
#define dwSetFrameFilter_Expect(dev, val) dwSetFrameFilter_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilter_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilter_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilter_StubWithCallback(CMOCK_dwSetFrameFilter_CALLBACK Callback);
#define dwSetFrameFilter_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilter_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilter_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilter_IgnoreArg_dev() dwSetFrameFilter_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilter_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilter_IgnoreArg_val() dwSetFrameFilter_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilter_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterBehaveCoordinator_Ignore() dwSetFrameFilterBehaveCoordinator_CMockIgnore()
void dwSetFrameFilterBehaveCoordinator_CMockIgnore(void);
#define dwSetFrameFilterBehaveCoordinator_Expect(dev, val) dwSetFrameFilterBehaveCoordinator_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterBehaveCoordinator_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterBehaveCoordinator_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterBehaveCoordinator_StubWithCallback(CMOCK_dwSetFrameFilterBehaveCoordinator_CALLBACK Callback);
#define dwSetFrameFilterBehaveCoordinator_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterBehaveCoordinator_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterBehaveCoordinator_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterBehaveCoordinator_IgnoreArg_dev() dwSetFrameFilterBehaveCoordinator_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterBehaveCoordinator_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterBehaveCoordinator_IgnoreArg_val() dwSetFrameFilterBehaveCoordinator_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterBehaveCoordinator_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowBeacon_Ignore() dwSetFrameFilterAllowBeacon_CMockIgnore()
void dwSetFrameFilterAllowBeacon_CMockIgnore(void);
#define dwSetFrameFilterAllowBeacon_Expect(dev, val) dwSetFrameFilterAllowBeacon_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterAllowBeacon_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterAllowBeacon_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterAllowBeacon_StubWithCallback(CMOCK_dwSetFrameFilterAllowBeacon_CALLBACK Callback);
#define dwSetFrameFilterAllowBeacon_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterAllowBeacon_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterAllowBeacon_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterAllowBeacon_IgnoreArg_dev() dwSetFrameFilterAllowBeacon_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterAllowBeacon_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowBeacon_IgnoreArg_val() dwSetFrameFilterAllowBeacon_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterAllowBeacon_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowData_Ignore() dwSetFrameFilterAllowData_CMockIgnore()
void dwSetFrameFilterAllowData_CMockIgnore(void);
#define dwSetFrameFilterAllowData_Expect(dev, val) dwSetFrameFilterAllowData_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterAllowData_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterAllowData_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterAllowData_StubWithCallback(CMOCK_dwSetFrameFilterAllowData_CALLBACK Callback);
#define dwSetFrameFilterAllowData_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterAllowData_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterAllowData_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterAllowData_IgnoreArg_dev() dwSetFrameFilterAllowData_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterAllowData_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowData_IgnoreArg_val() dwSetFrameFilterAllowData_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterAllowData_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowAcknowledgement_Ignore() dwSetFrameFilterAllowAcknowledgement_CMockIgnore()
void dwSetFrameFilterAllowAcknowledgement_CMockIgnore(void);
#define dwSetFrameFilterAllowAcknowledgement_Expect(dev, val) dwSetFrameFilterAllowAcknowledgement_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterAllowAcknowledgement_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterAllowAcknowledgement_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterAllowAcknowledgement_StubWithCallback(CMOCK_dwSetFrameFilterAllowAcknowledgement_CALLBACK Callback);
#define dwSetFrameFilterAllowAcknowledgement_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterAllowAcknowledgement_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterAllowAcknowledgement_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterAllowAcknowledgement_IgnoreArg_dev() dwSetFrameFilterAllowAcknowledgement_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterAllowAcknowledgement_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowAcknowledgement_IgnoreArg_val() dwSetFrameFilterAllowAcknowledgement_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterAllowAcknowledgement_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowMAC_Ignore() dwSetFrameFilterAllowMAC_CMockIgnore()
void dwSetFrameFilterAllowMAC_CMockIgnore(void);
#define dwSetFrameFilterAllowMAC_Expect(dev, val) dwSetFrameFilterAllowMAC_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterAllowMAC_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterAllowMAC_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterAllowMAC_StubWithCallback(CMOCK_dwSetFrameFilterAllowMAC_CALLBACK Callback);
#define dwSetFrameFilterAllowMAC_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterAllowMAC_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterAllowMAC_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterAllowMAC_IgnoreArg_dev() dwSetFrameFilterAllowMAC_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterAllowMAC_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowMAC_IgnoreArg_val() dwSetFrameFilterAllowMAC_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterAllowMAC_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowReserved_Ignore() dwSetFrameFilterAllowReserved_CMockIgnore()
void dwSetFrameFilterAllowReserved_CMockIgnore(void);
#define dwSetFrameFilterAllowReserved_Expect(dev, val) dwSetFrameFilterAllowReserved_CMockExpect(__LINE__, dev, val)
void dwSetFrameFilterAllowReserved_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetFrameFilterAllowReserved_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetFrameFilterAllowReserved_StubWithCallback(CMOCK_dwSetFrameFilterAllowReserved_CALLBACK Callback);
#define dwSetFrameFilterAllowReserved_ExpectWithArray(dev, dev_Depth, val) dwSetFrameFilterAllowReserved_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetFrameFilterAllowReserved_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetFrameFilterAllowReserved_IgnoreArg_dev() dwSetFrameFilterAllowReserved_CMockIgnoreArg_dev(__LINE__)
void dwSetFrameFilterAllowReserved_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetFrameFilterAllowReserved_IgnoreArg_val() dwSetFrameFilterAllowReserved_CMockIgnoreArg_val(__LINE__)
void dwSetFrameFilterAllowReserved_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetDoubleBuffering_Ignore() dwSetDoubleBuffering_CMockIgnore()
void dwSetDoubleBuffering_CMockIgnore(void);
#define dwSetDoubleBuffering_Expect(dev, val) dwSetDoubleBuffering_CMockExpect(__LINE__, dev, val)
void dwSetDoubleBuffering_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetDoubleBuffering_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetDoubleBuffering_StubWithCallback(CMOCK_dwSetDoubleBuffering_CALLBACK Callback);
#define dwSetDoubleBuffering_ExpectWithArray(dev, dev_Depth, val) dwSetDoubleBuffering_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetDoubleBuffering_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetDoubleBuffering_IgnoreArg_dev() dwSetDoubleBuffering_CMockIgnoreArg_dev(__LINE__)
void dwSetDoubleBuffering_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetDoubleBuffering_IgnoreArg_val() dwSetDoubleBuffering_CMockIgnoreArg_val(__LINE__)
void dwSetDoubleBuffering_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetInterruptPolarity_Ignore() dwSetInterruptPolarity_CMockIgnore()
void dwSetInterruptPolarity_CMockIgnore(void);
#define dwSetInterruptPolarity_Expect(dev, val) dwSetInterruptPolarity_CMockExpect(__LINE__, dev, val)
void dwSetInterruptPolarity_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetInterruptPolarity_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetInterruptPolarity_StubWithCallback(CMOCK_dwSetInterruptPolarity_CALLBACK Callback);
#define dwSetInterruptPolarity_ExpectWithArray(dev, dev_Depth, val) dwSetInterruptPolarity_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetInterruptPolarity_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetInterruptPolarity_IgnoreArg_dev() dwSetInterruptPolarity_CMockIgnoreArg_dev(__LINE__)
void dwSetInterruptPolarity_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetInterruptPolarity_IgnoreArg_val() dwSetInterruptPolarity_CMockIgnoreArg_val(__LINE__)
void dwSetInterruptPolarity_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetReceiverAutoReenable_Ignore() dwSetReceiverAutoReenable_CMockIgnore()
void dwSetReceiverAutoReenable_CMockIgnore(void);
#define dwSetReceiverAutoReenable_Expect(dev, val) dwSetReceiverAutoReenable_CMockExpect(__LINE__, dev, val)
void dwSetReceiverAutoReenable_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSetReceiverAutoReenable_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSetReceiverAutoReenable_StubWithCallback(CMOCK_dwSetReceiverAutoReenable_CALLBACK Callback);
#define dwSetReceiverAutoReenable_ExpectWithArray(dev, dev_Depth, val) dwSetReceiverAutoReenable_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSetReceiverAutoReenable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSetReceiverAutoReenable_IgnoreArg_dev() dwSetReceiverAutoReenable_CMockIgnoreArg_dev(__LINE__)
void dwSetReceiverAutoReenable_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetReceiverAutoReenable_IgnoreArg_val() dwSetReceiverAutoReenable_CMockIgnoreArg_val(__LINE__)
void dwSetReceiverAutoReenable_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnSent_Ignore() dwInterruptOnSent_CMockIgnore()
void dwInterruptOnSent_CMockIgnore(void);
#define dwInterruptOnSent_Expect(dev, val) dwInterruptOnSent_CMockExpect(__LINE__, dev, val)
void dwInterruptOnSent_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnSent_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnSent_StubWithCallback(CMOCK_dwInterruptOnSent_CALLBACK Callback);
#define dwInterruptOnSent_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnSent_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnSent_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnSent_IgnoreArg_dev() dwInterruptOnSent_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnSent_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnSent_IgnoreArg_val() dwInterruptOnSent_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnSent_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceived_Ignore() dwInterruptOnReceived_CMockIgnore()
void dwInterruptOnReceived_CMockIgnore(void);
#define dwInterruptOnReceived_Expect(dev, val) dwInterruptOnReceived_CMockExpect(__LINE__, dev, val)
void dwInterruptOnReceived_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnReceived_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnReceived_StubWithCallback(CMOCK_dwInterruptOnReceived_CALLBACK Callback);
#define dwInterruptOnReceived_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnReceived_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnReceived_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnReceived_IgnoreArg_dev() dwInterruptOnReceived_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnReceived_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceived_IgnoreArg_val() dwInterruptOnReceived_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnReceived_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveFailed_Ignore() dwInterruptOnReceiveFailed_CMockIgnore()
void dwInterruptOnReceiveFailed_CMockIgnore(void);
#define dwInterruptOnReceiveFailed_Expect(dev, val) dwInterruptOnReceiveFailed_CMockExpect(__LINE__, dev, val)
void dwInterruptOnReceiveFailed_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnReceiveFailed_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnReceiveFailed_StubWithCallback(CMOCK_dwInterruptOnReceiveFailed_CALLBACK Callback);
#define dwInterruptOnReceiveFailed_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnReceiveFailed_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnReceiveFailed_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnReceiveFailed_IgnoreArg_dev() dwInterruptOnReceiveFailed_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnReceiveFailed_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveFailed_IgnoreArg_val() dwInterruptOnReceiveFailed_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnReceiveFailed_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveTimeout_Ignore() dwInterruptOnReceiveTimeout_CMockIgnore()
void dwInterruptOnReceiveTimeout_CMockIgnore(void);
#define dwInterruptOnReceiveTimeout_Expect(dev, val) dwInterruptOnReceiveTimeout_CMockExpect(__LINE__, dev, val)
void dwInterruptOnReceiveTimeout_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnReceiveTimeout_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnReceiveTimeout_StubWithCallback(CMOCK_dwInterruptOnReceiveTimeout_CALLBACK Callback);
#define dwInterruptOnReceiveTimeout_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnReceiveTimeout_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnReceiveTimeout_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnReceiveTimeout_IgnoreArg_dev() dwInterruptOnReceiveTimeout_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnReceiveTimeout_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveTimeout_IgnoreArg_val() dwInterruptOnReceiveTimeout_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnReceiveTimeout_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveTimestampAvailable_Ignore() dwInterruptOnReceiveTimestampAvailable_CMockIgnore()
void dwInterruptOnReceiveTimestampAvailable_CMockIgnore(void);
#define dwInterruptOnReceiveTimestampAvailable_Expect(dev, val) dwInterruptOnReceiveTimestampAvailable_CMockExpect(__LINE__, dev, val)
void dwInterruptOnReceiveTimestampAvailable_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnReceiveTimestampAvailable_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnReceiveTimestampAvailable_StubWithCallback(CMOCK_dwInterruptOnReceiveTimestampAvailable_CALLBACK Callback);
#define dwInterruptOnReceiveTimestampAvailable_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnReceiveTimestampAvailable_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnReceiveTimestampAvailable_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnReceiveTimestampAvailable_IgnoreArg_dev() dwInterruptOnReceiveTimestampAvailable_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnReceiveTimestampAvailable_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnReceiveTimestampAvailable_IgnoreArg_val() dwInterruptOnReceiveTimestampAvailable_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnReceiveTimestampAvailable_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnAutomaticAcknowledgeTrigger_Ignore() dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnore()
void dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnore(void);
#define dwInterruptOnAutomaticAcknowledgeTrigger_Expect(dev, val) dwInterruptOnAutomaticAcknowledgeTrigger_CMockExpect(__LINE__, dev, val)
void dwInterruptOnAutomaticAcknowledgeTrigger_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwInterruptOnAutomaticAcknowledgeTrigger_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwInterruptOnAutomaticAcknowledgeTrigger_StubWithCallback(CMOCK_dwInterruptOnAutomaticAcknowledgeTrigger_CALLBACK Callback);
#define dwInterruptOnAutomaticAcknowledgeTrigger_ExpectWithArray(dev, dev_Depth, val) dwInterruptOnAutomaticAcknowledgeTrigger_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwInterruptOnAutomaticAcknowledgeTrigger_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwInterruptOnAutomaticAcknowledgeTrigger_IgnoreArg_dev() dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnoreArg_dev(__LINE__)
void dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwInterruptOnAutomaticAcknowledgeTrigger_IgnoreArg_val() dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnoreArg_val(__LINE__)
void dwInterruptOnAutomaticAcknowledgeTrigger_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwClearInterrupts_Ignore() dwClearInterrupts_CMockIgnore()
void dwClearInterrupts_CMockIgnore(void);
#define dwClearInterrupts_Expect(dev) dwClearInterrupts_CMockExpect(__LINE__, dev)
void dwClearInterrupts_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwClearInterrupts_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwClearInterrupts_StubWithCallback(CMOCK_dwClearInterrupts_CALLBACK Callback);
#define dwClearInterrupts_ExpectWithArray(dev, dev_Depth) dwClearInterrupts_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwClearInterrupts_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwClearInterrupts_IgnoreArg_dev() dwClearInterrupts_CMockIgnoreArg_dev(__LINE__)
void dwClearInterrupts_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIdle_Ignore() dwIdle_CMockIgnore()
void dwIdle_CMockIgnore(void);
#define dwIdle_Expect(dev) dwIdle_CMockExpect(__LINE__, dev)
void dwIdle_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwIdle_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIdle_StubWithCallback(CMOCK_dwIdle_CALLBACK Callback);
#define dwIdle_ExpectWithArray(dev, dev_Depth) dwIdle_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwIdle_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwIdle_IgnoreArg_dev() dwIdle_CMockIgnoreArg_dev(__LINE__)
void dwIdle_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwNewReceive_Ignore() dwNewReceive_CMockIgnore()
void dwNewReceive_CMockIgnore(void);
#define dwNewReceive_Expect(dev) dwNewReceive_CMockExpect(__LINE__, dev)
void dwNewReceive_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwNewReceive_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwNewReceive_StubWithCallback(CMOCK_dwNewReceive_CALLBACK Callback);
#define dwNewReceive_ExpectWithArray(dev, dev_Depth) dwNewReceive_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwNewReceive_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwNewReceive_IgnoreArg_dev() dwNewReceive_CMockIgnoreArg_dev(__LINE__)
void dwNewReceive_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwStartReceive_Ignore() dwStartReceive_CMockIgnore()
void dwStartReceive_CMockIgnore(void);
#define dwStartReceive_Expect(dev) dwStartReceive_CMockExpect(__LINE__, dev)
void dwStartReceive_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwStartReceive_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwStartReceive_StubWithCallback(CMOCK_dwStartReceive_CALLBACK Callback);
#define dwStartReceive_ExpectWithArray(dev, dev_Depth) dwStartReceive_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwStartReceive_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwStartReceive_IgnoreArg_dev() dwStartReceive_CMockIgnoreArg_dev(__LINE__)
void dwStartReceive_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwNewTransmit_Ignore() dwNewTransmit_CMockIgnore()
void dwNewTransmit_CMockIgnore(void);
#define dwNewTransmit_Expect(dev) dwNewTransmit_CMockExpect(__LINE__, dev)
void dwNewTransmit_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwNewTransmit_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwNewTransmit_StubWithCallback(CMOCK_dwNewTransmit_CALLBACK Callback);
#define dwNewTransmit_ExpectWithArray(dev, dev_Depth) dwNewTransmit_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwNewTransmit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwNewTransmit_IgnoreArg_dev() dwNewTransmit_CMockIgnoreArg_dev(__LINE__)
void dwNewTransmit_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwStartTransmit_Ignore() dwStartTransmit_CMockIgnore()
void dwStartTransmit_CMockIgnore(void);
#define dwStartTransmit_Expect(dev) dwStartTransmit_CMockExpect(__LINE__, dev)
void dwStartTransmit_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwStartTransmit_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwStartTransmit_StubWithCallback(CMOCK_dwStartTransmit_CALLBACK Callback);
#define dwStartTransmit_ExpectWithArray(dev, dev_Depth) dwStartTransmit_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwStartTransmit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwStartTransmit_IgnoreArg_dev() dwStartTransmit_CMockIgnoreArg_dev(__LINE__)
void dwStartTransmit_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwNewConfiguration_Ignore() dwNewConfiguration_CMockIgnore()
void dwNewConfiguration_CMockIgnore(void);
#define dwNewConfiguration_Expect(dev) dwNewConfiguration_CMockExpect(__LINE__, dev)
void dwNewConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwNewConfiguration_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwNewConfiguration_StubWithCallback(CMOCK_dwNewConfiguration_CALLBACK Callback);
#define dwNewConfiguration_ExpectWithArray(dev, dev_Depth) dwNewConfiguration_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwNewConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwNewConfiguration_IgnoreArg_dev() dwNewConfiguration_CMockIgnoreArg_dev(__LINE__)
void dwNewConfiguration_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwCommitConfiguration_Ignore() dwCommitConfiguration_CMockIgnore()
void dwCommitConfiguration_CMockIgnore(void);
#define dwCommitConfiguration_Expect(dev) dwCommitConfiguration_CMockExpect(__LINE__, dev)
void dwCommitConfiguration_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwCommitConfiguration_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwCommitConfiguration_StubWithCallback(CMOCK_dwCommitConfiguration_CALLBACK Callback);
#define dwCommitConfiguration_ExpectWithArray(dev, dev_Depth) dwCommitConfiguration_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwCommitConfiguration_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwCommitConfiguration_IgnoreArg_dev() dwCommitConfiguration_CMockIgnoreArg_dev(__LINE__)
void dwCommitConfiguration_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWaitForResponse_Ignore() dwWaitForResponse_CMockIgnore()
void dwWaitForResponse_CMockIgnore(void);
#define dwWaitForResponse_Expect(dev, val) dwWaitForResponse_CMockExpect(__LINE__, dev, val)
void dwWaitForResponse_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwWaitForResponse_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwWaitForResponse_StubWithCallback(CMOCK_dwWaitForResponse_CALLBACK Callback);
#define dwWaitForResponse_ExpectWithArray(dev, dev_Depth, val) dwWaitForResponse_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwWaitForResponse_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwWaitForResponse_IgnoreArg_dev() dwWaitForResponse_CMockIgnoreArg_dev(__LINE__)
void dwWaitForResponse_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwWaitForResponse_IgnoreArg_val() dwWaitForResponse_CMockIgnoreArg_val(__LINE__)
void dwWaitForResponse_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSuppressFrameCheck_Ignore() dwSuppressFrameCheck_CMockIgnore()
void dwSuppressFrameCheck_CMockIgnore(void);
#define dwSuppressFrameCheck_Expect(dev, val) dwSuppressFrameCheck_CMockExpect(__LINE__, dev, val)
void dwSuppressFrameCheck_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwSuppressFrameCheck_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwSuppressFrameCheck_StubWithCallback(CMOCK_dwSuppressFrameCheck_CALLBACK Callback);
#define dwSuppressFrameCheck_ExpectWithArray(dev, dev_Depth, val) dwSuppressFrameCheck_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwSuppressFrameCheck_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwSuppressFrameCheck_IgnoreArg_dev() dwSuppressFrameCheck_CMockIgnoreArg_dev(__LINE__)
void dwSuppressFrameCheck_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSuppressFrameCheck_IgnoreArg_val() dwSuppressFrameCheck_CMockIgnoreArg_val(__LINE__)
void dwSuppressFrameCheck_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwUseSmartPower_Ignore() dwUseSmartPower_CMockIgnore()
void dwUseSmartPower_CMockIgnore(void);
#define dwUseSmartPower_Expect(dev, smartPower) dwUseSmartPower_CMockExpect(__LINE__, dev, smartPower)
void dwUseSmartPower_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool smartPower);
typedef void (* CMOCK_dwUseSmartPower_CALLBACK)(dwDevice_t* dev, bool smartPower, int cmock_num_calls);
void dwUseSmartPower_StubWithCallback(CMOCK_dwUseSmartPower_CALLBACK Callback);
#define dwUseSmartPower_ExpectWithArray(dev, dev_Depth, smartPower) dwUseSmartPower_CMockExpectWithArray(__LINE__, dev, dev_Depth, smartPower)
void dwUseSmartPower_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool smartPower);
#define dwUseSmartPower_IgnoreArg_dev() dwUseSmartPower_CMockIgnoreArg_dev(__LINE__)
void dwUseSmartPower_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwUseSmartPower_IgnoreArg_smartPower() dwUseSmartPower_CMockIgnoreArg_smartPower(__LINE__)
void dwUseSmartPower_CMockIgnoreArg_smartPower(UNITY_LINE_TYPE cmock_line);
#define dwSetDelay_IgnoreAndReturn(cmock_retval) dwSetDelay_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwSetDelay_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, dwTime_t cmock_to_return);
#define dwSetDelay_ExpectAndReturn(dev, delay, cmock_retval) dwSetDelay_CMockExpectAndReturn(__LINE__, dev, delay, cmock_retval)
void dwSetDelay_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, const dwTime_t* delay, dwTime_t cmock_to_return);
typedef dwTime_t (* CMOCK_dwSetDelay_CALLBACK)(dwDevice_t* dev, const dwTime_t* delay, int cmock_num_calls);
void dwSetDelay_StubWithCallback(CMOCK_dwSetDelay_CALLBACK Callback);
#define dwSetDelay_ExpectWithArrayAndReturn(dev, dev_Depth, delay, delay_Depth, cmock_retval) dwSetDelay_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, delay, delay_Depth, cmock_retval)
void dwSetDelay_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, const dwTime_t* delay, int delay_Depth, dwTime_t cmock_to_return);
#define dwSetDelay_IgnoreArg_dev() dwSetDelay_CMockIgnoreArg_dev(__LINE__)
void dwSetDelay_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetDelay_IgnoreArg_delay() dwSetDelay_CMockIgnoreArg_delay(__LINE__)
void dwSetDelay_CMockIgnoreArg_delay(UNITY_LINE_TYPE cmock_line);
#define dwSetTxRxTime_Ignore() dwSetTxRxTime_CMockIgnore()
void dwSetTxRxTime_CMockIgnore(void);
#define dwSetTxRxTime_Expect(dev, futureTime) dwSetTxRxTime_CMockExpect(__LINE__, dev, futureTime)
void dwSetTxRxTime_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, const dwTime_t futureTime);
typedef void (* CMOCK_dwSetTxRxTime_CALLBACK)(dwDevice_t* dev, const dwTime_t futureTime, int cmock_num_calls);
void dwSetTxRxTime_StubWithCallback(CMOCK_dwSetTxRxTime_CALLBACK Callback);
#define dwSetTxRxTime_ExpectWithArray(dev, dev_Depth, futureTime) dwSetTxRxTime_CMockExpectWithArray(__LINE__, dev, dev_Depth, futureTime)
void dwSetTxRxTime_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, const dwTime_t futureTime);
#define dwSetTxRxTime_IgnoreArg_dev() dwSetTxRxTime_CMockIgnoreArg_dev(__LINE__)
void dwSetTxRxTime_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetTxRxTime_IgnoreArg_futureTime() dwSetTxRxTime_CMockIgnoreArg_futureTime(__LINE__)
void dwSetTxRxTime_CMockIgnoreArg_futureTime(UNITY_LINE_TYPE cmock_line);
#define dwSetDataRate_Ignore() dwSetDataRate_CMockIgnore()
void dwSetDataRate_CMockIgnore(void);
#define dwSetDataRate_Expect(dev, rate) dwSetDataRate_CMockExpect(__LINE__, dev, rate)
void dwSetDataRate_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t rate);
typedef void (* CMOCK_dwSetDataRate_CALLBACK)(dwDevice_t* dev, uint8_t rate, int cmock_num_calls);
void dwSetDataRate_StubWithCallback(CMOCK_dwSetDataRate_CALLBACK Callback);
#define dwSetDataRate_ExpectWithArray(dev, dev_Depth, rate) dwSetDataRate_CMockExpectWithArray(__LINE__, dev, dev_Depth, rate)
void dwSetDataRate_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t rate);
#define dwSetDataRate_IgnoreArg_dev() dwSetDataRate_CMockIgnoreArg_dev(__LINE__)
void dwSetDataRate_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetDataRate_IgnoreArg_rate() dwSetDataRate_CMockIgnoreArg_rate(__LINE__)
void dwSetDataRate_CMockIgnoreArg_rate(UNITY_LINE_TYPE cmock_line);
#define dwSetPulseFrequency_Ignore() dwSetPulseFrequency_CMockIgnore()
void dwSetPulseFrequency_CMockIgnore(void);
#define dwSetPulseFrequency_Expect(dev, freq) dwSetPulseFrequency_CMockExpect(__LINE__, dev, freq)
void dwSetPulseFrequency_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t freq);
typedef void (* CMOCK_dwSetPulseFrequency_CALLBACK)(dwDevice_t* dev, uint8_t freq, int cmock_num_calls);
void dwSetPulseFrequency_StubWithCallback(CMOCK_dwSetPulseFrequency_CALLBACK Callback);
#define dwSetPulseFrequency_ExpectWithArray(dev, dev_Depth, freq) dwSetPulseFrequency_CMockExpectWithArray(__LINE__, dev, dev_Depth, freq)
void dwSetPulseFrequency_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t freq);
#define dwSetPulseFrequency_IgnoreArg_dev() dwSetPulseFrequency_CMockIgnoreArg_dev(__LINE__)
void dwSetPulseFrequency_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetPulseFrequency_IgnoreArg_freq() dwSetPulseFrequency_CMockIgnoreArg_freq(__LINE__)
void dwSetPulseFrequency_CMockIgnoreArg_freq(UNITY_LINE_TYPE cmock_line);
#define dwGetPulseFrequency_IgnoreAndReturn(cmock_retval) dwGetPulseFrequency_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetPulseFrequency_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define dwGetPulseFrequency_ExpectAndReturn(dev, cmock_retval) dwGetPulseFrequency_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetPulseFrequency_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_dwGetPulseFrequency_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetPulseFrequency_StubWithCallback(CMOCK_dwGetPulseFrequency_CALLBACK Callback);
#define dwGetPulseFrequency_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetPulseFrequency_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetPulseFrequency_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t cmock_to_return);
#define dwGetPulseFrequency_IgnoreArg_dev() dwGetPulseFrequency_CMockIgnoreArg_dev(__LINE__)
void dwGetPulseFrequency_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetPreambleLength_Ignore() dwSetPreambleLength_CMockIgnore()
void dwSetPreambleLength_CMockIgnore(void);
#define dwSetPreambleLength_Expect(dev, prealen) dwSetPreambleLength_CMockExpect(__LINE__, dev, prealen)
void dwSetPreambleLength_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t prealen);
typedef void (* CMOCK_dwSetPreambleLength_CALLBACK)(dwDevice_t* dev, uint8_t prealen, int cmock_num_calls);
void dwSetPreambleLength_StubWithCallback(CMOCK_dwSetPreambleLength_CALLBACK Callback);
#define dwSetPreambleLength_ExpectWithArray(dev, dev_Depth, prealen) dwSetPreambleLength_CMockExpectWithArray(__LINE__, dev, dev_Depth, prealen)
void dwSetPreambleLength_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t prealen);
#define dwSetPreambleLength_IgnoreArg_dev() dwSetPreambleLength_CMockIgnoreArg_dev(__LINE__)
void dwSetPreambleLength_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetPreambleLength_IgnoreArg_prealen() dwSetPreambleLength_CMockIgnoreArg_prealen(__LINE__)
void dwSetPreambleLength_CMockIgnoreArg_prealen(UNITY_LINE_TYPE cmock_line);
#define dwUseExtendedFrameLength_Ignore() dwUseExtendedFrameLength_CMockIgnore()
void dwUseExtendedFrameLength_CMockIgnore(void);
#define dwUseExtendedFrameLength_Expect(dev, val) dwUseExtendedFrameLength_CMockExpect(__LINE__, dev, val)
void dwUseExtendedFrameLength_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwUseExtendedFrameLength_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwUseExtendedFrameLength_StubWithCallback(CMOCK_dwUseExtendedFrameLength_CALLBACK Callback);
#define dwUseExtendedFrameLength_ExpectWithArray(dev, dev_Depth, val) dwUseExtendedFrameLength_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwUseExtendedFrameLength_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwUseExtendedFrameLength_IgnoreArg_dev() dwUseExtendedFrameLength_CMockIgnoreArg_dev(__LINE__)
void dwUseExtendedFrameLength_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwUseExtendedFrameLength_IgnoreArg_val() dwUseExtendedFrameLength_CMockIgnoreArg_val(__LINE__)
void dwUseExtendedFrameLength_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwReceivePermanently_Ignore() dwReceivePermanently_CMockIgnore()
void dwReceivePermanently_CMockIgnore(void);
#define dwReceivePermanently_Expect(dev, val) dwReceivePermanently_CMockExpect(__LINE__, dev, val)
void dwReceivePermanently_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool val);
typedef void (* CMOCK_dwReceivePermanently_CALLBACK)(dwDevice_t* dev, bool val, int cmock_num_calls);
void dwReceivePermanently_StubWithCallback(CMOCK_dwReceivePermanently_CALLBACK Callback);
#define dwReceivePermanently_ExpectWithArray(dev, dev_Depth, val) dwReceivePermanently_CMockExpectWithArray(__LINE__, dev, dev_Depth, val)
void dwReceivePermanently_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool val);
#define dwReceivePermanently_IgnoreArg_dev() dwReceivePermanently_CMockIgnoreArg_dev(__LINE__)
void dwReceivePermanently_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwReceivePermanently_IgnoreArg_val() dwReceivePermanently_CMockIgnoreArg_val(__LINE__)
void dwReceivePermanently_CMockIgnoreArg_val(UNITY_LINE_TYPE cmock_line);
#define dwSetChannel_Ignore() dwSetChannel_CMockIgnore()
void dwSetChannel_CMockIgnore(void);
#define dwSetChannel_Expect(dev, channel) dwSetChannel_CMockExpect(__LINE__, dev, channel)
void dwSetChannel_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t channel);
typedef void (* CMOCK_dwSetChannel_CALLBACK)(dwDevice_t* dev, uint8_t channel, int cmock_num_calls);
void dwSetChannel_StubWithCallback(CMOCK_dwSetChannel_CALLBACK Callback);
#define dwSetChannel_ExpectWithArray(dev, dev_Depth, channel) dwSetChannel_CMockExpectWithArray(__LINE__, dev, dev_Depth, channel)
void dwSetChannel_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t channel);
#define dwSetChannel_IgnoreArg_dev() dwSetChannel_CMockIgnoreArg_dev(__LINE__)
void dwSetChannel_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetChannel_IgnoreArg_channel() dwSetChannel_CMockIgnoreArg_channel(__LINE__)
void dwSetChannel_CMockIgnoreArg_channel(UNITY_LINE_TYPE cmock_line);
#define dwSetPreambleCode_Ignore() dwSetPreambleCode_CMockIgnore()
void dwSetPreambleCode_CMockIgnore(void);
#define dwSetPreambleCode_Expect(dev, preacode) dwSetPreambleCode_CMockExpect(__LINE__, dev, preacode)
void dwSetPreambleCode_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t preacode);
typedef void (* CMOCK_dwSetPreambleCode_CALLBACK)(dwDevice_t* dev, uint8_t preacode, int cmock_num_calls);
void dwSetPreambleCode_StubWithCallback(CMOCK_dwSetPreambleCode_CALLBACK Callback);
#define dwSetPreambleCode_ExpectWithArray(dev, dev_Depth, preacode) dwSetPreambleCode_CMockExpectWithArray(__LINE__, dev, dev_Depth, preacode)
void dwSetPreambleCode_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t preacode);
#define dwSetPreambleCode_IgnoreArg_dev() dwSetPreambleCode_CMockIgnoreArg_dev(__LINE__)
void dwSetPreambleCode_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetPreambleCode_IgnoreArg_preacode() dwSetPreambleCode_CMockIgnoreArg_preacode(__LINE__)
void dwSetPreambleCode_CMockIgnoreArg_preacode(UNITY_LINE_TYPE cmock_line);
#define dwSetDefaults_Ignore() dwSetDefaults_CMockIgnore()
void dwSetDefaults_CMockIgnore(void);
#define dwSetDefaults_Expect(dev) dwSetDefaults_CMockExpect(__LINE__, dev)
void dwSetDefaults_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwSetDefaults_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwSetDefaults_StubWithCallback(CMOCK_dwSetDefaults_CALLBACK Callback);
#define dwSetDefaults_ExpectWithArray(dev, dev_Depth) dwSetDefaults_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwSetDefaults_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwSetDefaults_IgnoreArg_dev() dwSetDefaults_CMockIgnoreArg_dev(__LINE__)
void dwSetDefaults_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetData_Ignore() dwSetData_CMockIgnore()
void dwSetData_CMockIgnore(void);
#define dwSetData_Expect(dev, data, n) dwSetData_CMockExpect(__LINE__, dev, data, n)
void dwSetData_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t* data, unsigned int n);
typedef void (* CMOCK_dwSetData_CALLBACK)(dwDevice_t* dev, uint8_t* data, unsigned int n, int cmock_num_calls);
void dwSetData_StubWithCallback(CMOCK_dwSetData_CALLBACK Callback);
#define dwSetData_ExpectWithArray(dev, dev_Depth, data, data_Depth, n) dwSetData_CMockExpectWithArray(__LINE__, dev, dev_Depth, data, data_Depth, n)
void dwSetData_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t* data, int data_Depth, unsigned int n);
#define dwSetData_IgnoreArg_dev() dwSetData_CMockIgnoreArg_dev(__LINE__)
void dwSetData_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetData_IgnoreArg_data() dwSetData_CMockIgnoreArg_data(__LINE__)
void dwSetData_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define dwSetData_IgnoreArg_n() dwSetData_CMockIgnoreArg_n(__LINE__)
void dwSetData_CMockIgnoreArg_n(UNITY_LINE_TYPE cmock_line);
#define dwGetDataLength_IgnoreAndReturn(cmock_retval) dwGetDataLength_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetDataLength_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, unsigned int cmock_to_return);
#define dwGetDataLength_ExpectAndReturn(dev, cmock_retval) dwGetDataLength_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetDataLength_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, unsigned int cmock_to_return);
typedef unsigned int (* CMOCK_dwGetDataLength_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetDataLength_StubWithCallback(CMOCK_dwGetDataLength_CALLBACK Callback);
#define dwGetDataLength_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetDataLength_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetDataLength_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, unsigned int cmock_to_return);
#define dwGetDataLength_IgnoreArg_dev() dwGetDataLength_CMockIgnoreArg_dev(__LINE__)
void dwGetDataLength_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetData_Ignore() dwGetData_CMockIgnore()
void dwGetData_CMockIgnore(void);
#define dwGetData_Expect(dev, data, n) dwGetData_CMockExpect(__LINE__, dev, data, n)
void dwGetData_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint8_t* data, unsigned int n);
typedef void (* CMOCK_dwGetData_CALLBACK)(dwDevice_t* dev, uint8_t* data, unsigned int n, int cmock_num_calls);
void dwGetData_StubWithCallback(CMOCK_dwGetData_CALLBACK Callback);
#define dwGetData_ExpectWithArray(dev, dev_Depth, data, data_Depth, n) dwGetData_CMockExpectWithArray(__LINE__, dev, dev_Depth, data, data_Depth, n)
void dwGetData_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint8_t* data, int data_Depth, unsigned int n);
#define dwGetData_IgnoreArg_dev() dwGetData_CMockIgnoreArg_dev(__LINE__)
void dwGetData_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetData_IgnoreArg_data() dwGetData_CMockIgnoreArg_data(__LINE__)
void dwGetData_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define dwGetData_IgnoreArg_n() dwGetData_CMockIgnoreArg_n(__LINE__)
void dwGetData_CMockIgnoreArg_n(UNITY_LINE_TYPE cmock_line);
#define dwGetTransmitTimestamp_Ignore() dwGetTransmitTimestamp_CMockIgnore()
void dwGetTransmitTimestamp_CMockIgnore(void);
#define dwGetTransmitTimestamp_Expect(dev, time) dwGetTransmitTimestamp_CMockExpect(__LINE__, dev, time)
void dwGetTransmitTimestamp_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t* time);
typedef void (* CMOCK_dwGetTransmitTimestamp_CALLBACK)(dwDevice_t* dev, dwTime_t* time, int cmock_num_calls);
void dwGetTransmitTimestamp_StubWithCallback(CMOCK_dwGetTransmitTimestamp_CALLBACK Callback);
#define dwGetTransmitTimestamp_ExpectWithArray(dev, dev_Depth, time, time_Depth) dwGetTransmitTimestamp_CMockExpectWithArray(__LINE__, dev, dev_Depth, time, time_Depth)
void dwGetTransmitTimestamp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t* time, int time_Depth);
#define dwGetTransmitTimestamp_IgnoreArg_dev() dwGetTransmitTimestamp_CMockIgnoreArg_dev(__LINE__)
void dwGetTransmitTimestamp_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetTransmitTimestamp_IgnoreArg_time() dwGetTransmitTimestamp_CMockIgnoreArg_time(__LINE__)
void dwGetTransmitTimestamp_CMockIgnoreArg_time(UNITY_LINE_TYPE cmock_line);
#define dwGetReceiveTimestamp_Ignore() dwGetReceiveTimestamp_CMockIgnore()
void dwGetReceiveTimestamp_CMockIgnore(void);
#define dwGetReceiveTimestamp_Expect(dev, time) dwGetReceiveTimestamp_CMockExpect(__LINE__, dev, time)
void dwGetReceiveTimestamp_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t* time);
typedef void (* CMOCK_dwGetReceiveTimestamp_CALLBACK)(dwDevice_t* dev, dwTime_t* time, int cmock_num_calls);
void dwGetReceiveTimestamp_StubWithCallback(CMOCK_dwGetReceiveTimestamp_CALLBACK Callback);
#define dwGetReceiveTimestamp_ExpectWithArray(dev, dev_Depth, time, time_Depth) dwGetReceiveTimestamp_CMockExpectWithArray(__LINE__, dev, dev_Depth, time, time_Depth)
void dwGetReceiveTimestamp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t* time, int time_Depth);
#define dwGetReceiveTimestamp_IgnoreArg_dev() dwGetReceiveTimestamp_CMockIgnoreArg_dev(__LINE__)
void dwGetReceiveTimestamp_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetReceiveTimestamp_IgnoreArg_time() dwGetReceiveTimestamp_CMockIgnoreArg_time(__LINE__)
void dwGetReceiveTimestamp_CMockIgnoreArg_time(UNITY_LINE_TYPE cmock_line);
#define dwGetRawReceiveTimestamp_Ignore() dwGetRawReceiveTimestamp_CMockIgnore()
void dwGetRawReceiveTimestamp_CMockIgnore(void);
#define dwGetRawReceiveTimestamp_Expect(dev, time) dwGetRawReceiveTimestamp_CMockExpect(__LINE__, dev, time)
void dwGetRawReceiveTimestamp_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t* time);
typedef void (* CMOCK_dwGetRawReceiveTimestamp_CALLBACK)(dwDevice_t* dev, dwTime_t* time, int cmock_num_calls);
void dwGetRawReceiveTimestamp_StubWithCallback(CMOCK_dwGetRawReceiveTimestamp_CALLBACK Callback);
#define dwGetRawReceiveTimestamp_ExpectWithArray(dev, dev_Depth, time, time_Depth) dwGetRawReceiveTimestamp_CMockExpectWithArray(__LINE__, dev, dev_Depth, time, time_Depth)
void dwGetRawReceiveTimestamp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t* time, int time_Depth);
#define dwGetRawReceiveTimestamp_IgnoreArg_dev() dwGetRawReceiveTimestamp_CMockIgnoreArg_dev(__LINE__)
void dwGetRawReceiveTimestamp_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetRawReceiveTimestamp_IgnoreArg_time() dwGetRawReceiveTimestamp_CMockIgnoreArg_time(__LINE__)
void dwGetRawReceiveTimestamp_CMockIgnoreArg_time(UNITY_LINE_TYPE cmock_line);
#define dwCorrectTimestamp_Ignore() dwCorrectTimestamp_CMockIgnore()
void dwCorrectTimestamp_CMockIgnore(void);
#define dwCorrectTimestamp_Expect(dev, timestamp) dwCorrectTimestamp_CMockExpect(__LINE__, dev, timestamp)
void dwCorrectTimestamp_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t* timestamp);
typedef void (* CMOCK_dwCorrectTimestamp_CALLBACK)(dwDevice_t* dev, dwTime_t* timestamp, int cmock_num_calls);
void dwCorrectTimestamp_StubWithCallback(CMOCK_dwCorrectTimestamp_CALLBACK Callback);
#define dwCorrectTimestamp_ExpectWithArray(dev, dev_Depth, timestamp, timestamp_Depth) dwCorrectTimestamp_CMockExpectWithArray(__LINE__, dev, dev_Depth, timestamp, timestamp_Depth)
void dwCorrectTimestamp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t* timestamp, int timestamp_Depth);
#define dwCorrectTimestamp_IgnoreArg_dev() dwCorrectTimestamp_CMockIgnoreArg_dev(__LINE__)
void dwCorrectTimestamp_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwCorrectTimestamp_IgnoreArg_timestamp() dwCorrectTimestamp_CMockIgnoreArg_timestamp(__LINE__)
void dwCorrectTimestamp_CMockIgnoreArg_timestamp(UNITY_LINE_TYPE cmock_line);
#define dwGetSystemTimestamp_Ignore() dwGetSystemTimestamp_CMockIgnore()
void dwGetSystemTimestamp_CMockIgnore(void);
#define dwGetSystemTimestamp_Expect(dev, time) dwGetSystemTimestamp_CMockExpect(__LINE__, dev, time)
void dwGetSystemTimestamp_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t* time);
typedef void (* CMOCK_dwGetSystemTimestamp_CALLBACK)(dwDevice_t* dev, dwTime_t* time, int cmock_num_calls);
void dwGetSystemTimestamp_StubWithCallback(CMOCK_dwGetSystemTimestamp_CALLBACK Callback);
#define dwGetSystemTimestamp_ExpectWithArray(dev, dev_Depth, time, time_Depth) dwGetSystemTimestamp_CMockExpectWithArray(__LINE__, dev, dev_Depth, time, time_Depth)
void dwGetSystemTimestamp_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t* time, int time_Depth);
#define dwGetSystemTimestamp_IgnoreArg_dev() dwGetSystemTimestamp_CMockIgnoreArg_dev(__LINE__)
void dwGetSystemTimestamp_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetSystemTimestamp_IgnoreArg_time() dwGetSystemTimestamp_CMockIgnoreArg_time(__LINE__)
void dwGetSystemTimestamp_CMockIgnoreArg_time(UNITY_LINE_TYPE cmock_line);
#define dwIsTransmitDone_IgnoreAndReturn(cmock_retval) dwIsTransmitDone_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsTransmitDone_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsTransmitDone_ExpectAndReturn(dev, cmock_retval) dwIsTransmitDone_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsTransmitDone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsTransmitDone_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsTransmitDone_StubWithCallback(CMOCK_dwIsTransmitDone_CALLBACK Callback);
#define dwIsTransmitDone_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsTransmitDone_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsTransmitDone_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsTransmitDone_IgnoreArg_dev() dwIsTransmitDone_CMockIgnoreArg_dev(__LINE__)
void dwIsTransmitDone_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIsReceiveTimestampAvailable_IgnoreAndReturn(cmock_retval) dwIsReceiveTimestampAvailable_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsReceiveTimestampAvailable_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsReceiveTimestampAvailable_ExpectAndReturn(dev, cmock_retval) dwIsReceiveTimestampAvailable_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsReceiveTimestampAvailable_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsReceiveTimestampAvailable_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsReceiveTimestampAvailable_StubWithCallback(CMOCK_dwIsReceiveTimestampAvailable_CALLBACK Callback);
#define dwIsReceiveTimestampAvailable_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsReceiveTimestampAvailable_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsReceiveTimestampAvailable_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsReceiveTimestampAvailable_IgnoreArg_dev() dwIsReceiveTimestampAvailable_CMockIgnoreArg_dev(__LINE__)
void dwIsReceiveTimestampAvailable_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIsReceiveDone_IgnoreAndReturn(cmock_retval) dwIsReceiveDone_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsReceiveDone_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsReceiveDone_ExpectAndReturn(dev, cmock_retval) dwIsReceiveDone_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsReceiveDone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsReceiveDone_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsReceiveDone_StubWithCallback(CMOCK_dwIsReceiveDone_CALLBACK Callback);
#define dwIsReceiveDone_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsReceiveDone_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsReceiveDone_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsReceiveDone_IgnoreArg_dev() dwIsReceiveDone_CMockIgnoreArg_dev(__LINE__)
void dwIsReceiveDone_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIsReceiveFailed_IgnoreAndReturn(cmock_retval) dwIsReceiveFailed_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsReceiveFailed_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsReceiveFailed_ExpectAndReturn(dev, cmock_retval) dwIsReceiveFailed_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsReceiveFailed_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsReceiveFailed_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsReceiveFailed_StubWithCallback(CMOCK_dwIsReceiveFailed_CALLBACK Callback);
#define dwIsReceiveFailed_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsReceiveFailed_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsReceiveFailed_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsReceiveFailed_IgnoreArg_dev() dwIsReceiveFailed_CMockIgnoreArg_dev(__LINE__)
void dwIsReceiveFailed_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIsReceiveTimeout_IgnoreAndReturn(cmock_retval) dwIsReceiveTimeout_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsReceiveTimeout_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsReceiveTimeout_ExpectAndReturn(dev, cmock_retval) dwIsReceiveTimeout_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsReceiveTimeout_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsReceiveTimeout_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsReceiveTimeout_StubWithCallback(CMOCK_dwIsReceiveTimeout_CALLBACK Callback);
#define dwIsReceiveTimeout_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsReceiveTimeout_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsReceiveTimeout_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsReceiveTimeout_IgnoreArg_dev() dwIsReceiveTimeout_CMockIgnoreArg_dev(__LINE__)
void dwIsReceiveTimeout_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwIsClockProblem_IgnoreAndReturn(cmock_retval) dwIsClockProblem_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwIsClockProblem_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define dwIsClockProblem_ExpectAndReturn(dev, cmock_retval) dwIsClockProblem_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwIsClockProblem_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, bool cmock_to_return);
typedef bool (* CMOCK_dwIsClockProblem_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwIsClockProblem_StubWithCallback(CMOCK_dwIsClockProblem_CALLBACK Callback);
#define dwIsClockProblem_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwIsClockProblem_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwIsClockProblem_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, bool cmock_to_return);
#define dwIsClockProblem_IgnoreArg_dev() dwIsClockProblem_CMockIgnoreArg_dev(__LINE__)
void dwIsClockProblem_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwClearAllStatus_Ignore() dwClearAllStatus_CMockIgnore()
void dwClearAllStatus_CMockIgnore(void);
#define dwClearAllStatus_Expect(dev) dwClearAllStatus_CMockExpect(__LINE__, dev)
void dwClearAllStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwClearAllStatus_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwClearAllStatus_StubWithCallback(CMOCK_dwClearAllStatus_CALLBACK Callback);
#define dwClearAllStatus_ExpectWithArray(dev, dev_Depth) dwClearAllStatus_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwClearAllStatus_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwClearAllStatus_IgnoreArg_dev() dwClearAllStatus_CMockIgnoreArg_dev(__LINE__)
void dwClearAllStatus_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwClearReceiveTimestampAvailableStatus_Ignore() dwClearReceiveTimestampAvailableStatus_CMockIgnore()
void dwClearReceiveTimestampAvailableStatus_CMockIgnore(void);
#define dwClearReceiveTimestampAvailableStatus_Expect(dev) dwClearReceiveTimestampAvailableStatus_CMockExpect(__LINE__, dev)
void dwClearReceiveTimestampAvailableStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwClearReceiveTimestampAvailableStatus_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwClearReceiveTimestampAvailableStatus_StubWithCallback(CMOCK_dwClearReceiveTimestampAvailableStatus_CALLBACK Callback);
#define dwClearReceiveTimestampAvailableStatus_ExpectWithArray(dev, dev_Depth) dwClearReceiveTimestampAvailableStatus_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwClearReceiveTimestampAvailableStatus_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwClearReceiveTimestampAvailableStatus_IgnoreArg_dev() dwClearReceiveTimestampAvailableStatus_CMockIgnoreArg_dev(__LINE__)
void dwClearReceiveTimestampAvailableStatus_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwClearReceiveStatus_Ignore() dwClearReceiveStatus_CMockIgnore()
void dwClearReceiveStatus_CMockIgnore(void);
#define dwClearReceiveStatus_Expect(dev) dwClearReceiveStatus_CMockExpect(__LINE__, dev)
void dwClearReceiveStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwClearReceiveStatus_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwClearReceiveStatus_StubWithCallback(CMOCK_dwClearReceiveStatus_CALLBACK Callback);
#define dwClearReceiveStatus_ExpectWithArray(dev, dev_Depth) dwClearReceiveStatus_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwClearReceiveStatus_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwClearReceiveStatus_IgnoreArg_dev() dwClearReceiveStatus_CMockIgnoreArg_dev(__LINE__)
void dwClearReceiveStatus_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwClearTransmitStatus_Ignore() dwClearTransmitStatus_CMockIgnore()
void dwClearTransmitStatus_CMockIgnore(void);
#define dwClearTransmitStatus_Expect(dev) dwClearTransmitStatus_CMockExpect(__LINE__, dev)
void dwClearTransmitStatus_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwClearTransmitStatus_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwClearTransmitStatus_StubWithCallback(CMOCK_dwClearTransmitStatus_CALLBACK Callback);
#define dwClearTransmitStatus_ExpectWithArray(dev, dev_Depth) dwClearTransmitStatus_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwClearTransmitStatus_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwClearTransmitStatus_IgnoreArg_dev() dwClearTransmitStatus_CMockIgnoreArg_dev(__LINE__)
void dwClearTransmitStatus_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetReceiveQuality_IgnoreAndReturn(cmock_retval) dwGetReceiveQuality_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetReceiveQuality_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define dwGetReceiveQuality_ExpectAndReturn(dev, cmock_retval) dwGetReceiveQuality_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetReceiveQuality_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, float cmock_to_return);
typedef float (* CMOCK_dwGetReceiveQuality_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetReceiveQuality_StubWithCallback(CMOCK_dwGetReceiveQuality_CALLBACK Callback);
#define dwGetReceiveQuality_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetReceiveQuality_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetReceiveQuality_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, float cmock_to_return);
#define dwGetReceiveQuality_IgnoreArg_dev() dwGetReceiveQuality_CMockIgnoreArg_dev(__LINE__)
void dwGetReceiveQuality_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetFirstPathPower_IgnoreAndReturn(cmock_retval) dwGetFirstPathPower_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetFirstPathPower_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define dwGetFirstPathPower_ExpectAndReturn(dev, cmock_retval) dwGetFirstPathPower_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetFirstPathPower_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, float cmock_to_return);
typedef float (* CMOCK_dwGetFirstPathPower_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetFirstPathPower_StubWithCallback(CMOCK_dwGetFirstPathPower_CALLBACK Callback);
#define dwGetFirstPathPower_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetFirstPathPower_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetFirstPathPower_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, float cmock_to_return);
#define dwGetFirstPathPower_IgnoreArg_dev() dwGetFirstPathPower_CMockIgnoreArg_dev(__LINE__)
void dwGetFirstPathPower_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwGetReceivePower_IgnoreAndReturn(cmock_retval) dwGetReceivePower_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwGetReceivePower_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define dwGetReceivePower_ExpectAndReturn(dev, cmock_retval) dwGetReceivePower_CMockExpectAndReturn(__LINE__, dev, cmock_retval)
void dwGetReceivePower_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, float cmock_to_return);
typedef float (* CMOCK_dwGetReceivePower_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwGetReceivePower_StubWithCallback(CMOCK_dwGetReceivePower_CALLBACK Callback);
#define dwGetReceivePower_ExpectWithArrayAndReturn(dev, dev_Depth, cmock_retval) dwGetReceivePower_CMockExpectWithArrayAndReturn(__LINE__, dev, dev_Depth, cmock_retval)
void dwGetReceivePower_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, float cmock_to_return);
#define dwGetReceivePower_IgnoreArg_dev() dwGetReceivePower_CMockIgnoreArg_dev(__LINE__)
void dwGetReceivePower_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwEnableMode_Ignore() dwEnableMode_CMockIgnore()
void dwEnableMode_CMockIgnore(void);
#define dwEnableMode_Expect(dev, mode) dwEnableMode_CMockExpect(__LINE__, dev, mode)
void dwEnableMode_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, const uint8_t* mode);
typedef void (* CMOCK_dwEnableMode_CALLBACK)(dwDevice_t* dev, const uint8_t* mode, int cmock_num_calls);
void dwEnableMode_StubWithCallback(CMOCK_dwEnableMode_CALLBACK Callback);
#define dwEnableMode_ExpectWithArray(dev, dev_Depth, mode, mode_Depth) dwEnableMode_CMockExpectWithArray(__LINE__, dev, dev_Depth, mode, mode_Depth)
void dwEnableMode_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, const uint8_t* mode, int mode_Depth);
#define dwEnableMode_IgnoreArg_dev() dwEnableMode_CMockIgnoreArg_dev(__LINE__)
void dwEnableMode_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwEnableMode_IgnoreArg_mode() dwEnableMode_CMockIgnoreArg_mode(__LINE__)
void dwEnableMode_CMockIgnoreArg_mode(UNITY_LINE_TYPE cmock_line);
#define dwTune_Ignore() dwTune_CMockIgnore()
void dwTune_CMockIgnore(void);
#define dwTune_Expect(dev) dwTune_CMockExpect(__LINE__, dev)
void dwTune_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwTune_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwTune_StubWithCallback(CMOCK_dwTune_CALLBACK Callback);
#define dwTune_ExpectWithArray(dev, dev_Depth) dwTune_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwTune_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwTune_IgnoreArg_dev() dwTune_CMockIgnoreArg_dev(__LINE__)
void dwTune_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwHandleInterrupt_Ignore() dwHandleInterrupt_CMockIgnore()
void dwHandleInterrupt_CMockIgnore(void);
#define dwHandleInterrupt_Expect(dev) dwHandleInterrupt_CMockExpect(__LINE__, dev)
void dwHandleInterrupt_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev);
typedef void (* CMOCK_dwHandleInterrupt_CALLBACK)(dwDevice_t* dev, int cmock_num_calls);
void dwHandleInterrupt_StubWithCallback(CMOCK_dwHandleInterrupt_CALLBACK Callback);
#define dwHandleInterrupt_ExpectWithArray(dev, dev_Depth) dwHandleInterrupt_CMockExpectWithArray(__LINE__, dev, dev_Depth)
void dwHandleInterrupt_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth);
#define dwHandleInterrupt_IgnoreArg_dev() dwHandleInterrupt_CMockIgnoreArg_dev(__LINE__)
void dwHandleInterrupt_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetTxPower_Ignore() dwSetTxPower_CMockIgnore()
void dwSetTxPower_CMockIgnore(void);
#define dwSetTxPower_Expect(dev, txPower) dwSetTxPower_CMockExpect(__LINE__, dev, txPower)
void dwSetTxPower_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, uint32_t txPower);
typedef void (* CMOCK_dwSetTxPower_CALLBACK)(dwDevice_t* dev, uint32_t txPower, int cmock_num_calls);
void dwSetTxPower_StubWithCallback(CMOCK_dwSetTxPower_CALLBACK Callback);
#define dwSetTxPower_ExpectWithArray(dev, dev_Depth, txPower) dwSetTxPower_CMockExpectWithArray(__LINE__, dev, dev_Depth, txPower)
void dwSetTxPower_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, uint32_t txPower);
#define dwSetTxPower_IgnoreArg_dev() dwSetTxPower_CMockIgnoreArg_dev(__LINE__)
void dwSetTxPower_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetTxPower_IgnoreArg_txPower() dwSetTxPower_CMockIgnoreArg_txPower(__LINE__)
void dwSetTxPower_CMockIgnoreArg_txPower(UNITY_LINE_TYPE cmock_line);
#define dwAttachSentHandler_Ignore() dwAttachSentHandler_CMockIgnore()
void dwAttachSentHandler_CMockIgnore(void);
#define dwAttachSentHandler_Expect(dev, handler) dwAttachSentHandler_CMockExpect(__LINE__, dev, handler)
void dwAttachSentHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwHandler_t handler);
typedef void (* CMOCK_dwAttachSentHandler_CALLBACK)(dwDevice_t* dev, dwHandler_t handler, int cmock_num_calls);
void dwAttachSentHandler_StubWithCallback(CMOCK_dwAttachSentHandler_CALLBACK Callback);
#define dwAttachSentHandler_ExpectWithArray(dev, dev_Depth, handler) dwAttachSentHandler_CMockExpectWithArray(__LINE__, dev, dev_Depth, handler)
void dwAttachSentHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwHandler_t handler);
#define dwAttachSentHandler_IgnoreArg_dev() dwAttachSentHandler_CMockIgnoreArg_dev(__LINE__)
void dwAttachSentHandler_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwAttachSentHandler_IgnoreArg_handler() dwAttachSentHandler_CMockIgnoreArg_handler(__LINE__)
void dwAttachSentHandler_CMockIgnoreArg_handler(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceivedHandler_Ignore() dwAttachReceivedHandler_CMockIgnore()
void dwAttachReceivedHandler_CMockIgnore(void);
#define dwAttachReceivedHandler_Expect(dev, handler) dwAttachReceivedHandler_CMockExpect(__LINE__, dev, handler)
void dwAttachReceivedHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwHandler_t handler);
typedef void (* CMOCK_dwAttachReceivedHandler_CALLBACK)(dwDevice_t* dev, dwHandler_t handler, int cmock_num_calls);
void dwAttachReceivedHandler_StubWithCallback(CMOCK_dwAttachReceivedHandler_CALLBACK Callback);
#define dwAttachReceivedHandler_ExpectWithArray(dev, dev_Depth, handler) dwAttachReceivedHandler_CMockExpectWithArray(__LINE__, dev, dev_Depth, handler)
void dwAttachReceivedHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwHandler_t handler);
#define dwAttachReceivedHandler_IgnoreArg_dev() dwAttachReceivedHandler_CMockIgnoreArg_dev(__LINE__)
void dwAttachReceivedHandler_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceivedHandler_IgnoreArg_handler() dwAttachReceivedHandler_CMockIgnoreArg_handler(__LINE__)
void dwAttachReceivedHandler_CMockIgnoreArg_handler(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceiveTimeoutHandler_Ignore() dwAttachReceiveTimeoutHandler_CMockIgnore()
void dwAttachReceiveTimeoutHandler_CMockIgnore(void);
#define dwAttachReceiveTimeoutHandler_Expect(dev, handler) dwAttachReceiveTimeoutHandler_CMockExpect(__LINE__, dev, handler)
void dwAttachReceiveTimeoutHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwHandler_t handler);
typedef void (* CMOCK_dwAttachReceiveTimeoutHandler_CALLBACK)(dwDevice_t* dev, dwHandler_t handler, int cmock_num_calls);
void dwAttachReceiveTimeoutHandler_StubWithCallback(CMOCK_dwAttachReceiveTimeoutHandler_CALLBACK Callback);
#define dwAttachReceiveTimeoutHandler_ExpectWithArray(dev, dev_Depth, handler) dwAttachReceiveTimeoutHandler_CMockExpectWithArray(__LINE__, dev, dev_Depth, handler)
void dwAttachReceiveTimeoutHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwHandler_t handler);
#define dwAttachReceiveTimeoutHandler_IgnoreArg_dev() dwAttachReceiveTimeoutHandler_CMockIgnoreArg_dev(__LINE__)
void dwAttachReceiveTimeoutHandler_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceiveTimeoutHandler_IgnoreArg_handler() dwAttachReceiveTimeoutHandler_CMockIgnoreArg_handler(__LINE__)
void dwAttachReceiveTimeoutHandler_CMockIgnoreArg_handler(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceiveFailedHandler_Ignore() dwAttachReceiveFailedHandler_CMockIgnore()
void dwAttachReceiveFailedHandler_CMockIgnore(void);
#define dwAttachReceiveFailedHandler_Expect(dev, handler) dwAttachReceiveFailedHandler_CMockExpect(__LINE__, dev, handler)
void dwAttachReceiveFailedHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwHandler_t handler);
typedef void (* CMOCK_dwAttachReceiveFailedHandler_CALLBACK)(dwDevice_t* dev, dwHandler_t handler, int cmock_num_calls);
void dwAttachReceiveFailedHandler_StubWithCallback(CMOCK_dwAttachReceiveFailedHandler_CALLBACK Callback);
#define dwAttachReceiveFailedHandler_ExpectWithArray(dev, dev_Depth, handler) dwAttachReceiveFailedHandler_CMockExpectWithArray(__LINE__, dev, dev_Depth, handler)
void dwAttachReceiveFailedHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwHandler_t handler);
#define dwAttachReceiveFailedHandler_IgnoreArg_dev() dwAttachReceiveFailedHandler_CMockIgnoreArg_dev(__LINE__)
void dwAttachReceiveFailedHandler_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwAttachReceiveFailedHandler_IgnoreArg_handler() dwAttachReceiveFailedHandler_CMockIgnoreArg_handler(__LINE__)
void dwAttachReceiveFailedHandler_CMockIgnoreArg_handler(UNITY_LINE_TYPE cmock_line);
#define dwSetAntenaDelay_Ignore() dwSetAntenaDelay_CMockIgnore()
void dwSetAntenaDelay_CMockIgnore(void);
#define dwSetAntenaDelay_Expect(dev, delay) dwSetAntenaDelay_CMockExpect(__LINE__, dev, delay)
void dwSetAntenaDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, dwTime_t delay);
typedef void (* CMOCK_dwSetAntenaDelay_CALLBACK)(dwDevice_t* dev, dwTime_t delay, int cmock_num_calls);
void dwSetAntenaDelay_StubWithCallback(CMOCK_dwSetAntenaDelay_CALLBACK Callback);
#define dwSetAntenaDelay_ExpectWithArray(dev, dev_Depth, delay) dwSetAntenaDelay_CMockExpectWithArray(__LINE__, dev, dev_Depth, delay)
void dwSetAntenaDelay_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, dwDevice_t* dev, int dev_Depth, dwTime_t delay);
#define dwSetAntenaDelay_IgnoreArg_dev() dwSetAntenaDelay_CMockIgnoreArg_dev(__LINE__)
void dwSetAntenaDelay_CMockIgnoreArg_dev(UNITY_LINE_TYPE cmock_line);
#define dwSetAntenaDelay_IgnoreArg_delay() dwSetAntenaDelay_CMockIgnoreArg_delay(__LINE__)
void dwSetAntenaDelay_CMockIgnoreArg_delay(UNITY_LINE_TYPE cmock_line);
#define dwStrError_IgnoreAndReturn(cmock_retval) dwStrError_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void dwStrError_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define dwStrError_ExpectAndReturn(error, cmock_retval) dwStrError_CMockExpectAndReturn(__LINE__, error, cmock_retval)
void dwStrError_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int error, char* cmock_to_return);
typedef char* (* CMOCK_dwStrError_CALLBACK)(int error, int cmock_num_calls);
void dwStrError_StubWithCallback(CMOCK_dwStrError_CALLBACK Callback);
#define dwStrError_IgnoreArg_error() dwStrError_CMockIgnoreArg_error(__LINE__)
void dwStrError_CMockIgnoreArg_error(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
