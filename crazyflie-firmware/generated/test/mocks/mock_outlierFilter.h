/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_OUTLIERFILTER_H
#define _MOCK_OUTLIERFILTER_H

#include "outlierFilter.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_outlierFilter_Init(void);
void mock_outlierFilter_Destroy(void);
void mock_outlierFilter_Verify(void);




#define outlierFilterValidateTdoaSimple_IgnoreAndReturn(cmock_retval) outlierFilterValidateTdoaSimple_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void outlierFilterValidateTdoaSimple_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define outlierFilterValidateTdoaSimple_ExpectAndReturn(tdoa, cmock_retval) outlierFilterValidateTdoaSimple_CMockExpectAndReturn(__LINE__, tdoa, cmock_retval)
void outlierFilterValidateTdoaSimple_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const tdoaMeasurement_t* tdoa, bool cmock_to_return);
typedef bool (* CMOCK_outlierFilterValidateTdoaSimple_CALLBACK)(const tdoaMeasurement_t* tdoa, int cmock_num_calls);
void outlierFilterValidateTdoaSimple_StubWithCallback(CMOCK_outlierFilterValidateTdoaSimple_CALLBACK Callback);
#define outlierFilterValidateTdoaSimple_ExpectWithArrayAndReturn(tdoa, tdoa_Depth, cmock_retval) outlierFilterValidateTdoaSimple_CMockExpectWithArrayAndReturn(__LINE__, tdoa, tdoa_Depth, cmock_retval)
void outlierFilterValidateTdoaSimple_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const tdoaMeasurement_t* tdoa, int tdoa_Depth, bool cmock_to_return);
#define outlierFilterValidateTdoaSimple_IgnoreArg_tdoa() outlierFilterValidateTdoaSimple_CMockIgnoreArg_tdoa(__LINE__)
void outlierFilterValidateTdoaSimple_CMockIgnoreArg_tdoa(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateTdoaSteps_IgnoreAndReturn(cmock_retval) outlierFilterValidateTdoaSteps_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void outlierFilterValidateTdoaSteps_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define outlierFilterValidateTdoaSteps_ExpectAndReturn(tdoa, error, jacobian, estPos, cmock_retval) outlierFilterValidateTdoaSteps_CMockExpectAndReturn(__LINE__, tdoa, error, jacobian, estPos, cmock_retval)
void outlierFilterValidateTdoaSteps_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const tdoaMeasurement_t* tdoa, const float error, const vector_t* jacobian, const point_t* estPos, bool cmock_to_return);
typedef bool (* CMOCK_outlierFilterValidateTdoaSteps_CALLBACK)(const tdoaMeasurement_t* tdoa, const float error, const vector_t* jacobian, const point_t* estPos, int cmock_num_calls);
void outlierFilterValidateTdoaSteps_StubWithCallback(CMOCK_outlierFilterValidateTdoaSteps_CALLBACK Callback);
#define outlierFilterValidateTdoaSteps_ExpectWithArrayAndReturn(tdoa, tdoa_Depth, error, jacobian, jacobian_Depth, estPos, estPos_Depth, cmock_retval) outlierFilterValidateTdoaSteps_CMockExpectWithArrayAndReturn(__LINE__, tdoa, tdoa_Depth, error, jacobian, jacobian_Depth, estPos, estPos_Depth, cmock_retval)
void outlierFilterValidateTdoaSteps_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const tdoaMeasurement_t* tdoa, int tdoa_Depth, const float error, const vector_t* jacobian, int jacobian_Depth, const point_t* estPos, int estPos_Depth, bool cmock_to_return);
#define outlierFilterValidateTdoaSteps_IgnoreArg_tdoa() outlierFilterValidateTdoaSteps_CMockIgnoreArg_tdoa(__LINE__)
void outlierFilterValidateTdoaSteps_CMockIgnoreArg_tdoa(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateTdoaSteps_IgnoreArg_error() outlierFilterValidateTdoaSteps_CMockIgnoreArg_error(__LINE__)
void outlierFilterValidateTdoaSteps_CMockIgnoreArg_error(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateTdoaSteps_IgnoreArg_jacobian() outlierFilterValidateTdoaSteps_CMockIgnoreArg_jacobian(__LINE__)
void outlierFilterValidateTdoaSteps_CMockIgnoreArg_jacobian(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateTdoaSteps_IgnoreArg_estPos() outlierFilterValidateTdoaSteps_CMockIgnoreArg_estPos(__LINE__)
void outlierFilterValidateTdoaSteps_CMockIgnoreArg_estPos(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateLighthouseSweep_IgnoreAndReturn(cmock_retval) outlierFilterValidateLighthouseSweep_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void outlierFilterValidateLighthouseSweep_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define outlierFilterValidateLighthouseSweep_ExpectAndReturn(this, distanceToBs, angleError, nowMs, cmock_retval) outlierFilterValidateLighthouseSweep_CMockExpectAndReturn(__LINE__, this, distanceToBs, angleError, nowMs, cmock_retval)
void outlierFilterValidateLighthouseSweep_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OutlierFilterLhState_t* this, const float distanceToBs, const float angleError, const uint32_t nowMs, bool cmock_to_return);
typedef bool (* CMOCK_outlierFilterValidateLighthouseSweep_CALLBACK)(OutlierFilterLhState_t* this, const float distanceToBs, const float angleError, const uint32_t nowMs, int cmock_num_calls);
void outlierFilterValidateLighthouseSweep_StubWithCallback(CMOCK_outlierFilterValidateLighthouseSweep_CALLBACK Callback);
#define outlierFilterValidateLighthouseSweep_ExpectWithArrayAndReturn(this, this_Depth, distanceToBs, angleError, nowMs, cmock_retval) outlierFilterValidateLighthouseSweep_CMockExpectWithArrayAndReturn(__LINE__, this, this_Depth, distanceToBs, angleError, nowMs, cmock_retval)
void outlierFilterValidateLighthouseSweep_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OutlierFilterLhState_t* this, int this_Depth, const float distanceToBs, const float angleError, const uint32_t nowMs, bool cmock_to_return);
#define outlierFilterValidateLighthouseSweep_IgnoreArg_this() outlierFilterValidateLighthouseSweep_CMockIgnoreArg_this(__LINE__)
void outlierFilterValidateLighthouseSweep_CMockIgnoreArg_this(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateLighthouseSweep_IgnoreArg_distanceToBs() outlierFilterValidateLighthouseSweep_CMockIgnoreArg_distanceToBs(__LINE__)
void outlierFilterValidateLighthouseSweep_CMockIgnoreArg_distanceToBs(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateLighthouseSweep_IgnoreArg_angleError() outlierFilterValidateLighthouseSweep_CMockIgnoreArg_angleError(__LINE__)
void outlierFilterValidateLighthouseSweep_CMockIgnoreArg_angleError(UNITY_LINE_TYPE cmock_line);
#define outlierFilterValidateLighthouseSweep_IgnoreArg_nowMs() outlierFilterValidateLighthouseSweep_CMockIgnoreArg_nowMs(__LINE__)
void outlierFilterValidateLighthouseSweep_CMockIgnoreArg_nowMs(UNITY_LINE_TYPE cmock_line);
#define outlierFilterReset_Ignore() outlierFilterReset_CMockIgnore()
void outlierFilterReset_CMockIgnore(void);
#define outlierFilterReset_Expect(this, nowMs) outlierFilterReset_CMockExpect(__LINE__, this, nowMs)
void outlierFilterReset_CMockExpect(UNITY_LINE_TYPE cmock_line, OutlierFilterLhState_t* this, const uint32_t nowMs);
typedef void (* CMOCK_outlierFilterReset_CALLBACK)(OutlierFilterLhState_t* this, const uint32_t nowMs, int cmock_num_calls);
void outlierFilterReset_StubWithCallback(CMOCK_outlierFilterReset_CALLBACK Callback);
#define outlierFilterReset_ExpectWithArray(this, this_Depth, nowMs) outlierFilterReset_CMockExpectWithArray(__LINE__, this, this_Depth, nowMs)
void outlierFilterReset_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, OutlierFilterLhState_t* this, int this_Depth, const uint32_t nowMs);
#define outlierFilterReset_IgnoreArg_this() outlierFilterReset_CMockIgnoreArg_this(__LINE__)
void outlierFilterReset_CMockIgnoreArg_this(UNITY_LINE_TYPE cmock_line);
#define outlierFilterReset_IgnoreArg_nowMs() outlierFilterReset_CMockIgnoreArg_nowMs(__LINE__)
void outlierFilterReset_CMockIgnoreArg_nowMs(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
