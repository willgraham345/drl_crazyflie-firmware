/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ESTIMATOR_H
#define _MOCK_ESTIMATOR_H

#include "estimator.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_estimator_Init(void);
void mock_estimator_Destroy(void);
void mock_estimator_Verify(void);




#define stateEstimatorInit_Ignore() stateEstimatorInit_CMockIgnore()
void stateEstimatorInit_CMockIgnore(void);
#define stateEstimatorInit_Expect(estimator) stateEstimatorInit_CMockExpect(__LINE__, estimator)
void stateEstimatorInit_CMockExpect(UNITY_LINE_TYPE cmock_line, StateEstimatorType estimator);
typedef void (* CMOCK_stateEstimatorInit_CALLBACK)(StateEstimatorType estimator, int cmock_num_calls);
void stateEstimatorInit_StubWithCallback(CMOCK_stateEstimatorInit_CALLBACK Callback);
#define stateEstimatorInit_IgnoreArg_estimator() stateEstimatorInit_CMockIgnoreArg_estimator(__LINE__)
void stateEstimatorInit_CMockIgnoreArg_estimator(UNITY_LINE_TYPE cmock_line);
#define stateEstimatorTest_IgnoreAndReturn(cmock_retval) stateEstimatorTest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stateEstimatorTest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define stateEstimatorTest_ExpectAndReturn(cmock_retval) stateEstimatorTest_CMockExpectAndReturn(__LINE__, cmock_retval)
void stateEstimatorTest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_stateEstimatorTest_CALLBACK)(int cmock_num_calls);
void stateEstimatorTest_StubWithCallback(CMOCK_stateEstimatorTest_CALLBACK Callback);
#define stateEstimatorSwitchTo_Ignore() stateEstimatorSwitchTo_CMockIgnore()
void stateEstimatorSwitchTo_CMockIgnore(void);
#define stateEstimatorSwitchTo_Expect(estimator) stateEstimatorSwitchTo_CMockExpect(__LINE__, estimator)
void stateEstimatorSwitchTo_CMockExpect(UNITY_LINE_TYPE cmock_line, StateEstimatorType estimator);
typedef void (* CMOCK_stateEstimatorSwitchTo_CALLBACK)(StateEstimatorType estimator, int cmock_num_calls);
void stateEstimatorSwitchTo_StubWithCallback(CMOCK_stateEstimatorSwitchTo_CALLBACK Callback);
#define stateEstimatorSwitchTo_IgnoreArg_estimator() stateEstimatorSwitchTo_CMockIgnoreArg_estimator(__LINE__)
void stateEstimatorSwitchTo_CMockIgnoreArg_estimator(UNITY_LINE_TYPE cmock_line);
#define stateEstimator_Ignore() stateEstimator_CMockIgnore()
void stateEstimator_CMockIgnore(void);
#define stateEstimator_Expect(state, tick) stateEstimator_CMockExpect(__LINE__, state, tick)
void stateEstimator_CMockExpect(UNITY_LINE_TYPE cmock_line, state_t* state, const uint32_t tick);
typedef void (* CMOCK_stateEstimator_CALLBACK)(state_t* state, const uint32_t tick, int cmock_num_calls);
void stateEstimator_StubWithCallback(CMOCK_stateEstimator_CALLBACK Callback);
#define stateEstimator_ExpectWithArray(state, state_Depth, tick) stateEstimator_CMockExpectWithArray(__LINE__, state, state_Depth, tick)
void stateEstimator_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, state_t* state, int state_Depth, const uint32_t tick);
#define stateEstimator_IgnoreArg_state() stateEstimator_CMockIgnoreArg_state(__LINE__)
void stateEstimator_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define stateEstimator_IgnoreArg_tick() stateEstimator_CMockIgnoreArg_tick(__LINE__)
void stateEstimator_CMockIgnoreArg_tick(UNITY_LINE_TYPE cmock_line);
#define stateEstimatorGetType_IgnoreAndReturn(cmock_retval) stateEstimatorGetType_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stateEstimatorGetType_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, StateEstimatorType cmock_to_return);
#define stateEstimatorGetType_ExpectAndReturn(cmock_retval) stateEstimatorGetType_CMockExpectAndReturn(__LINE__, cmock_retval)
void stateEstimatorGetType_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, StateEstimatorType cmock_to_return);
typedef StateEstimatorType (* CMOCK_stateEstimatorGetType_CALLBACK)(int cmock_num_calls);
void stateEstimatorGetType_StubWithCallback(CMOCK_stateEstimatorGetType_CALLBACK Callback);
#define stateEstimatorGetName_IgnoreAndReturn(cmock_retval) stateEstimatorGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stateEstimatorGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define stateEstimatorGetName_ExpectAndReturn(cmock_retval) stateEstimatorGetName_CMockExpectAndReturn(__LINE__, cmock_retval)
void stateEstimatorGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
typedef const char* (* CMOCK_stateEstimatorGetName_CALLBACK)(int cmock_num_calls);
void stateEstimatorGetName_StubWithCallback(CMOCK_stateEstimatorGetName_CALLBACK Callback);
#define estimatorEnqueue_Ignore() estimatorEnqueue_CMockIgnore()
void estimatorEnqueue_CMockIgnore(void);
#define estimatorEnqueue_Expect(measurement) estimatorEnqueue_CMockExpect(__LINE__, measurement)
void estimatorEnqueue_CMockExpect(UNITY_LINE_TYPE cmock_line, const measurement_t* measurement);
typedef void (* CMOCK_estimatorEnqueue_CALLBACK)(const measurement_t* measurement, int cmock_num_calls);
void estimatorEnqueue_StubWithCallback(CMOCK_estimatorEnqueue_CALLBACK Callback);
#define estimatorEnqueue_ExpectWithArray(measurement, measurement_Depth) estimatorEnqueue_CMockExpectWithArray(__LINE__, measurement, measurement_Depth)
void estimatorEnqueue_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const measurement_t* measurement, int measurement_Depth);
#define estimatorEnqueue_IgnoreArg_measurement() estimatorEnqueue_CMockIgnoreArg_measurement(__LINE__)
void estimatorEnqueue_CMockIgnoreArg_measurement(UNITY_LINE_TYPE cmock_line);
#define estimatorDequeue_IgnoreAndReturn(cmock_retval) estimatorDequeue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void estimatorDequeue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define estimatorDequeue_ExpectAndReturn(measurement, cmock_retval) estimatorDequeue_CMockExpectAndReturn(__LINE__, measurement, cmock_retval)
void estimatorDequeue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, measurement_t* measurement, bool cmock_to_return);
typedef bool (* CMOCK_estimatorDequeue_CALLBACK)(measurement_t* measurement, int cmock_num_calls);
void estimatorDequeue_StubWithCallback(CMOCK_estimatorDequeue_CALLBACK Callback);
#define estimatorDequeue_ExpectWithArrayAndReturn(measurement, measurement_Depth, cmock_retval) estimatorDequeue_CMockExpectWithArrayAndReturn(__LINE__, measurement, measurement_Depth, cmock_retval)
void estimatorDequeue_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, measurement_t* measurement, int measurement_Depth, bool cmock_to_return);
#define estimatorDequeue_IgnoreArg_measurement() estimatorDequeue_CMockIgnoreArg_measurement(__LINE__)
void estimatorDequeue_CMockIgnoreArg_measurement(UNITY_LINE_TYPE cmock_line);
#define estimatorOutOfTreeInit_Ignore() estimatorOutOfTreeInit_CMockIgnore()
void estimatorOutOfTreeInit_CMockIgnore(void);
#define estimatorOutOfTreeInit_Expect() estimatorOutOfTreeInit_CMockExpect(__LINE__)
void estimatorOutOfTreeInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_estimatorOutOfTreeInit_CALLBACK)(int cmock_num_calls);
void estimatorOutOfTreeInit_StubWithCallback(CMOCK_estimatorOutOfTreeInit_CALLBACK Callback);
#define estimatorOutOfTreeTest_IgnoreAndReturn(cmock_retval) estimatorOutOfTreeTest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void estimatorOutOfTreeTest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define estimatorOutOfTreeTest_ExpectAndReturn(cmock_retval) estimatorOutOfTreeTest_CMockExpectAndReturn(__LINE__, cmock_retval)
void estimatorOutOfTreeTest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_estimatorOutOfTreeTest_CALLBACK)(int cmock_num_calls);
void estimatorOutOfTreeTest_StubWithCallback(CMOCK_estimatorOutOfTreeTest_CALLBACK Callback);
#define estimatorOutOfTree_Ignore() estimatorOutOfTree_CMockIgnore()
void estimatorOutOfTree_CMockIgnore(void);
#define estimatorOutOfTree_Expect(state, tick) estimatorOutOfTree_CMockExpect(__LINE__, state, tick)
void estimatorOutOfTree_CMockExpect(UNITY_LINE_TYPE cmock_line, state_t* state, const uint32_t tick);
typedef void (* CMOCK_estimatorOutOfTree_CALLBACK)(state_t* state, const uint32_t tick, int cmock_num_calls);
void estimatorOutOfTree_StubWithCallback(CMOCK_estimatorOutOfTree_CALLBACK Callback);
#define estimatorOutOfTree_ExpectWithArray(state, state_Depth, tick) estimatorOutOfTree_CMockExpectWithArray(__LINE__, state, state_Depth, tick)
void estimatorOutOfTree_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, state_t* state, int state_Depth, const uint32_t tick);
#define estimatorOutOfTree_IgnoreArg_state() estimatorOutOfTree_CMockIgnoreArg_state(__LINE__)
void estimatorOutOfTree_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define estimatorOutOfTree_IgnoreArg_tick() estimatorOutOfTree_CMockIgnoreArg_tick(__LINE__)
void estimatorOutOfTree_CMockIgnoreArg_tick(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
