/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_STATSCNT_H
#define _MOCK_STATSCNT_H

#include "statsCnt.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_statsCnt_Init(void);
void mock_statsCnt_Destroy(void);
void mock_statsCnt_Verify(void);




#define statsCntRateCounterInit_Ignore() statsCntRateCounterInit_CMockIgnore()
void statsCntRateCounterInit_CMockIgnore(void);
#define statsCntRateCounterInit_Expect(counter, averagingIntervalMs) statsCntRateCounterInit_CMockExpect(__LINE__, counter, averagingIntervalMs)
void statsCntRateCounterInit_CMockExpect(UNITY_LINE_TYPE cmock_line, statsCntRateCounter_t* counter, uint32_t averagingIntervalMs);
typedef void (* CMOCK_statsCntRateCounterInit_CALLBACK)(statsCntRateCounter_t* counter, uint32_t averagingIntervalMs, int cmock_num_calls);
void statsCntRateCounterInit_StubWithCallback(CMOCK_statsCntRateCounterInit_CALLBACK Callback);
#define statsCntRateCounterInit_ExpectWithArray(counter, counter_Depth, averagingIntervalMs) statsCntRateCounterInit_CMockExpectWithArray(__LINE__, counter, counter_Depth, averagingIntervalMs)
void statsCntRateCounterInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, statsCntRateCounter_t* counter, int counter_Depth, uint32_t averagingIntervalMs);
#define statsCntRateCounterInit_IgnoreArg_counter() statsCntRateCounterInit_CMockIgnoreArg_counter(__LINE__)
void statsCntRateCounterInit_CMockIgnoreArg_counter(UNITY_LINE_TYPE cmock_line);
#define statsCntRateCounterInit_IgnoreArg_averagingIntervalMs() statsCntRateCounterInit_CMockIgnoreArg_averagingIntervalMs(__LINE__)
void statsCntRateCounterInit_CMockIgnoreArg_averagingIntervalMs(UNITY_LINE_TYPE cmock_line);
#define statsCntRateCounterUpdate_IgnoreAndReturn(cmock_retval) statsCntRateCounterUpdate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void statsCntRateCounterUpdate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define statsCntRateCounterUpdate_ExpectAndReturn(counter, now_ms, cmock_retval) statsCntRateCounterUpdate_CMockExpectAndReturn(__LINE__, counter, now_ms, cmock_retval)
void statsCntRateCounterUpdate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, statsCntRateCounter_t* counter, uint32_t now_ms, float cmock_to_return);
typedef float (* CMOCK_statsCntRateCounterUpdate_CALLBACK)(statsCntRateCounter_t* counter, uint32_t now_ms, int cmock_num_calls);
void statsCntRateCounterUpdate_StubWithCallback(CMOCK_statsCntRateCounterUpdate_CALLBACK Callback);
#define statsCntRateCounterUpdate_ExpectWithArrayAndReturn(counter, counter_Depth, now_ms, cmock_retval) statsCntRateCounterUpdate_CMockExpectWithArrayAndReturn(__LINE__, counter, counter_Depth, now_ms, cmock_retval)
void statsCntRateCounterUpdate_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, statsCntRateCounter_t* counter, int counter_Depth, uint32_t now_ms, float cmock_to_return);
#define statsCntRateCounterUpdate_IgnoreArg_counter() statsCntRateCounterUpdate_CMockIgnoreArg_counter(__LINE__)
void statsCntRateCounterUpdate_CMockIgnoreArg_counter(UNITY_LINE_TYPE cmock_line);
#define statsCntRateCounterUpdate_IgnoreArg_now_ms() statsCntRateCounterUpdate_CMockIgnoreArg_now_ms(__LINE__)
void statsCntRateCounterUpdate_CMockIgnoreArg_now_ms(UNITY_LINE_TYPE cmock_line);
#define statsCntRateLoggerInit_Ignore() statsCntRateLoggerInit_CMockIgnore()
void statsCntRateLoggerInit_CMockIgnore(void);
#define statsCntRateLoggerInit_Expect(logger, averagingIntervalMs) statsCntRateLoggerInit_CMockExpect(__LINE__, logger, averagingIntervalMs)
void statsCntRateLoggerInit_CMockExpect(UNITY_LINE_TYPE cmock_line, statsCntRateLogger_t* logger, uint32_t averagingIntervalMs);
typedef void (* CMOCK_statsCntRateLoggerInit_CALLBACK)(statsCntRateLogger_t* logger, uint32_t averagingIntervalMs, int cmock_num_calls);
void statsCntRateLoggerInit_StubWithCallback(CMOCK_statsCntRateLoggerInit_CALLBACK Callback);
#define statsCntRateLoggerInit_ExpectWithArray(logger, logger_Depth, averagingIntervalMs) statsCntRateLoggerInit_CMockExpectWithArray(__LINE__, logger, logger_Depth, averagingIntervalMs)
void statsCntRateLoggerInit_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, statsCntRateLogger_t* logger, int logger_Depth, uint32_t averagingIntervalMs);
#define statsCntRateLoggerInit_IgnoreArg_logger() statsCntRateLoggerInit_CMockIgnoreArg_logger(__LINE__)
void statsCntRateLoggerInit_CMockIgnoreArg_logger(UNITY_LINE_TYPE cmock_line);
#define statsCntRateLoggerInit_IgnoreArg_averagingIntervalMs() statsCntRateLoggerInit_CMockIgnoreArg_averagingIntervalMs(__LINE__)
void statsCntRateLoggerInit_CMockIgnoreArg_averagingIntervalMs(UNITY_LINE_TYPE cmock_line);
#define statsCntRateLogHandler_IgnoreAndReturn(cmock_retval) statsCntRateLogHandler_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void statsCntRateLogHandler_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, float cmock_to_return);
#define statsCntRateLogHandler_ExpectAndReturn(timestamp, data, cmock_retval) statsCntRateLogHandler_CMockExpectAndReturn(__LINE__, timestamp, data, cmock_retval)
void statsCntRateLogHandler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t timestamp, void* data, float cmock_to_return);
typedef float (* CMOCK_statsCntRateLogHandler_CALLBACK)(uint32_t timestamp, void* data, int cmock_num_calls);
void statsCntRateLogHandler_StubWithCallback(CMOCK_statsCntRateLogHandler_CALLBACK Callback);
#define statsCntRateLogHandler_ExpectWithArrayAndReturn(timestamp, data, data_Depth, cmock_retval) statsCntRateLogHandler_CMockExpectWithArrayAndReturn(__LINE__, timestamp, data, data_Depth, cmock_retval)
void statsCntRateLogHandler_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t timestamp, void* data, int data_Depth, float cmock_to_return);
#define statsCntRateLogHandler_IgnoreArg_timestamp() statsCntRateLogHandler_CMockIgnoreArg_timestamp(__LINE__)
void statsCntRateLogHandler_CMockIgnoreArg_timestamp(UNITY_LINE_TYPE cmock_line);
#define statsCntRateLogHandler_IgnoreArg_data() statsCntRateLogHandler_CMockIgnoreArg_data(__LINE__)
void statsCntRateLogHandler_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
