/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CRTP_LOCALIZATION_SERVICE_H
#define _MOCK_CRTP_LOCALIZATION_SERVICE_H

#include "crtp_localization_service.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_crtp_localization_service_Init(void);
void mock_crtp_localization_service_Destroy(void);
void mock_crtp_localization_service_Verify(void);




#define locSrvInit_Ignore() locSrvInit_CMockIgnore()
void locSrvInit_CMockIgnore(void);
#define locSrvInit_Expect() locSrvInit_CMockExpect(__LINE__)
void locSrvInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_locSrvInit_CALLBACK)(int cmock_num_calls);
void locSrvInit_StubWithCallback(CMOCK_locSrvInit_CALLBACK Callback);
#define locSrvSendRangeFloat_Ignore() locSrvSendRangeFloat_CMockIgnore()
void locSrvSendRangeFloat_CMockIgnore(void);
#define locSrvSendRangeFloat_Expect(id, range) locSrvSendRangeFloat_CMockExpect(__LINE__, id, range)
void locSrvSendRangeFloat_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t id, float range);
typedef void (* CMOCK_locSrvSendRangeFloat_CALLBACK)(uint8_t id, float range, int cmock_num_calls);
void locSrvSendRangeFloat_StubWithCallback(CMOCK_locSrvSendRangeFloat_CALLBACK Callback);
#define locSrvSendRangeFloat_IgnoreArg_id() locSrvSendRangeFloat_CMockIgnoreArg_id(__LINE__)
void locSrvSendRangeFloat_CMockIgnoreArg_id(UNITY_LINE_TYPE cmock_line);
#define locSrvSendRangeFloat_IgnoreArg_range() locSrvSendRangeFloat_CMockIgnoreArg_range(__LINE__)
void locSrvSendRangeFloat_CMockIgnoreArg_range(UNITY_LINE_TYPE cmock_line);
#define locSrvSendLighthouseAngle_Ignore() locSrvSendLighthouseAngle_CMockIgnore()
void locSrvSendLighthouseAngle_CMockIgnore(void);
#define locSrvSendLighthouseAngle_Expect(baseStation, angles) locSrvSendLighthouseAngle_CMockExpect(__LINE__, baseStation, angles)
void locSrvSendLighthouseAngle_CMockExpect(UNITY_LINE_TYPE cmock_line, int baseStation, pulseProcessorResult_t* angles);
typedef void (* CMOCK_locSrvSendLighthouseAngle_CALLBACK)(int baseStation, pulseProcessorResult_t* angles, int cmock_num_calls);
void locSrvSendLighthouseAngle_StubWithCallback(CMOCK_locSrvSendLighthouseAngle_CALLBACK Callback);
#define locSrvSendLighthouseAngle_ExpectWithArray(baseStation, angles, angles_Depth) locSrvSendLighthouseAngle_CMockExpectWithArray(__LINE__, baseStation, angles, angles_Depth)
void locSrvSendLighthouseAngle_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, int baseStation, pulseProcessorResult_t* angles, int angles_Depth);
#define locSrvSendLighthouseAngle_IgnoreArg_baseStation() locSrvSendLighthouseAngle_CMockIgnoreArg_baseStation(__LINE__)
void locSrvSendLighthouseAngle_CMockIgnoreArg_baseStation(UNITY_LINE_TYPE cmock_line);
#define locSrvSendLighthouseAngle_IgnoreArg_angles() locSrvSendLighthouseAngle_CMockIgnoreArg_angles(__LINE__)
void locSrvSendLighthouseAngle_CMockIgnoreArg_angles(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
