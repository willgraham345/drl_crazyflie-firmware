/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MEM_H
#define _MOCK_MEM_H

#include "mem.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mem_Init(void);
void mock_mem_Destroy(void);
void mock_mem_Verify(void);




#define memInit_Ignore() memInit_CMockIgnore()
void memInit_CMockIgnore(void);
#define memInit_Expect() memInit_CMockExpect(__LINE__)
void memInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_memInit_CALLBACK)(int cmock_num_calls);
void memInit_StubWithCallback(CMOCK_memInit_CALLBACK Callback);
#define memTest_IgnoreAndReturn(cmock_retval) memTest_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void memTest_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define memTest_ExpectAndReturn(cmock_retval) memTest_CMockExpectAndReturn(__LINE__, cmock_retval)
void memTest_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_memTest_CALLBACK)(int cmock_num_calls);
void memTest_StubWithCallback(CMOCK_memTest_CALLBACK Callback);
#define memoryRegisterHandler_Ignore() memoryRegisterHandler_CMockIgnore()
void memoryRegisterHandler_CMockIgnore(void);
#define memoryRegisterHandler_Expect(handlerDef) memoryRegisterHandler_CMockExpect(__LINE__, handlerDef)
void memoryRegisterHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, const MemoryHandlerDef_t* handlerDef);
typedef void (* CMOCK_memoryRegisterHandler_CALLBACK)(const MemoryHandlerDef_t* handlerDef, int cmock_num_calls);
void memoryRegisterHandler_StubWithCallback(CMOCK_memoryRegisterHandler_CALLBACK Callback);
#define memoryRegisterHandler_ExpectWithArray(handlerDef, handlerDef_Depth) memoryRegisterHandler_CMockExpectWithArray(__LINE__, handlerDef, handlerDef_Depth)
void memoryRegisterHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const MemoryHandlerDef_t* handlerDef, int handlerDef_Depth);
#define memoryRegisterHandler_IgnoreArg_handlerDef() memoryRegisterHandler_CMockIgnoreArg_handlerDef(__LINE__)
void memoryRegisterHandler_CMockIgnoreArg_handlerDef(UNITY_LINE_TYPE cmock_line);
#define memoryRegisterOwHandler_Ignore() memoryRegisterOwHandler_CMockIgnore()
void memoryRegisterOwHandler_CMockIgnore(void);
#define memoryRegisterOwHandler_Expect(handlerDef) memoryRegisterOwHandler_CMockExpect(__LINE__, handlerDef)
void memoryRegisterOwHandler_CMockExpect(UNITY_LINE_TYPE cmock_line, const MemoryOwHandlerDef_t* handlerDef);
typedef void (* CMOCK_memoryRegisterOwHandler_CALLBACK)(const MemoryOwHandlerDef_t* handlerDef, int cmock_num_calls);
void memoryRegisterOwHandler_StubWithCallback(CMOCK_memoryRegisterOwHandler_CALLBACK Callback);
#define memoryRegisterOwHandler_ExpectWithArray(handlerDef, handlerDef_Depth) memoryRegisterOwHandler_CMockExpectWithArray(__LINE__, handlerDef, handlerDef_Depth)
void memoryRegisterOwHandler_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, const MemoryOwHandlerDef_t* handlerDef, int handlerDef_Depth);
#define memoryRegisterOwHandler_IgnoreArg_handlerDef() memoryRegisterOwHandler_CMockIgnoreArg_handlerDef(__LINE__)
void memoryRegisterOwHandler_CMockIgnoreArg_handlerDef(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
